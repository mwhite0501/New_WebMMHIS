@page "/"
@using Radzen
@using Radzen.Blazor;
@using System.Collections;
@using System.Timers;
@inject IJSRuntime JSRuntime
@inject MmhisController controller
@inject PageModel pageModel


<button class="openbtn" onclick="openNav()">&#9776; Search</button>
<div id="main" style="margin-left: 250px">

    <div>

        @if (spinning == true)
        {
            <div class="spinner"></div>
        }
        @if (Images.Any())
        {
            @*<img src="@ImagesRight[idx]" style="width: 33%; height: auto; position: relative;" />*@
            <img src="@Images[idx]" style="width: 100%; height: auto; position: relative;" />
            @*<img src="@ImagesLeft[idx]" style="width: 33%; height: auto; position: relative;" />*@
            log = double.Parse(Logmeters[idx]) * 0.000621371192;
            latitudeId = double.Parse(Latitudes[idx]);
            longitudeId = double.Parse(Longitudes[idx]);
        }

    </div>
    @if (Images.Any())
    {

        <div class="playpause">
            <button class="backbutton" @onclick="() => { idx = idx - 1 < 0 ? Images.Count() - 1 : idx - 1; isPause = true; }">&#8249;</button>
            <div class="divider" />
            <input type="checkbox" value="None" id="reverse" name="check" />
            <label for="reverse" tabindex=1 @onclick="() => { isPause = !isPause; OnSubmitReverse(); isTouchScreen = true; }"></label>
            <div class="divider" />
            <input type="checkbox" value="None" id="playpause" name="check" />
            <label for="playpause" tabindex=1 @onclick="() => { isPause = !isPause; OnSubmitPlay(); isTouchScreen = true; }"></label>
            <div class="divider" />
            <button  class="forwardbutton" @onclick="() => { idx = idx + 1 >= Images.Count() ? 0 : idx + 1; isPause = true; }">&#8250;</button>
        </div>
    }
    <br>
    <div id="mySidebar" class="sidebar">
        <a href="javascript:void(0)" class="closebtn" onclick="closeNav()">&times;</a>
        <img src="/Images/ArDOT_Logo_1.png" style="width: 200px; padding-left: 50px; padding-bottom: 25px; " />
        <ul class="nav flex-column">
            <EditForm Model="@controller" OnValidSubmit="AsyncLongOperation">
                <li class="nav-item px-2">
                    <InputSelect id="routeControl" Disabled="@IsDisabledRoute" Value="routeId" ValueChanged="@( (string s) => routeChanged(s))" ValueExpression="@( () => routeId)" class="form-control">
                        <option value="none">Route</option>
                        @foreach (var item in routes)
                        {
                            <option value="@item">@item</option>
                        }
                    </InputSelect>
                </li>
                <li class="nav-item px-2">
                    <InputSelect Disabled="@IsDisabledDirection" Value="directionId" ValueChanged="@( (string s) => directionChanged(s))" ValueExpression="@( () => directionId)" class="form-control">
                        <option value="none">Direction</option>
                        @foreach (var item in directions)
                        {
                            <option value="@item">@item</option>
                        }
                    </InputSelect>
                </li>
                <li class="nav-item px-2">
                    <InputSelect Disabled="@IsDisabledSection" Value="sectionId" ValueChanged="@( (string s) => sectionChanged(s))" ValueExpression="@( () => sectionId)" class="form-control">
                        <option value="none">Section</option>
                        @foreach (var item in sections)
                        {
                            <option value="@item">@item</option>
                        }
                    </InputSelect>
                </li>
                <li class="nav-item px-2">
                    <InputSelect Disabled="@IsDisabledYear" Value="yearId" ValueChanged="@( (string s) => yearChanged(s))" ValueExpression="@( () => yearId)" class="form-control">
                        <option value="none">Year</option>
                        @foreach (var item in years)
                        {
                            <option value="@item">@item</option>
                        }
                    </InputSelect>
                </li>
                <li class="nav-item px-2">
                    <RadzenTextBox Placeholder="Search Logmile" Name="Logmile" Change=@(args => OnChangeLogmeter(args, "TextBox with placeholder")) />
                    @*<RadzenRequiredValidator Component="Logmile" Text="ZIP code is required" Popup=@popup Style="position: absolute" />
                        <RadzenRegexValidator Component="Logmile" Text="ZIP code must be 5 digits" Pattern="\d{5}" Popup=@popup Style="position: absolute" />*@
                </li>
                <li class="nav-item px-2">
                    <input type="submit" class="btn btn-primary" value="Submit" disabled="@IsDisabledSubmit" />
                    <input type="reset" onclick="window.location.reload()" class="btn btn-primary" style="position: relative; " value="Clear" />
                </li>
                <li class="nav-item px-2">
                    Logmile: @log
                </li>
                <li class="nav-item px-2">
                    Latitude: @latitudeId
                </li>
                <li class="nav-item px-2">
                    Longitudes: @longitudeId
                </li>
            </EditForm>

        </ul>
    </div>
    <div class="row">
        <div class="col-xl-6">
            <RadzenGoogleMap ApiKey="" Style="width: 1500px; height: 740px; z-index: 1;" id="Map" Zoom="@zoom" Center="@(new GoogleMapPosition() { Lat = latitudeId, Lng = longitudeId })" MapClick="@AsyncMapOperation">
                <Markers>
                    @if (showArkansasMarker && Images.Any())
                    {
                        <RadzenGoogleMapMarker Title="Arkansas" Position="@(new GoogleMapPosition() { Lat = Convert.ToDouble(Latitudes[idx]), Lng = Convert.ToDouble(Longitudes[idx]) })" />
                    }
                </Markers>
            </RadzenGoogleMap>
        </div>
    </div>
</div>



    @code{
        PageModel model;
        bool popup;
        //map settings ==========================================================================
        int zoom = 8;
        bool showArkansasMarker;
        bool playpause = false;
        string clickedPosition = "";
        bool isTouchScreen;
        List<string> RouteInfo = new List<string>();
        List<string> Logmeters = new List<string>();
        List<string> Latitudes = new List<string>();
        List<string> Longitudes = new List<string>();

        //==========================================================================================================================
        //==========================================================================================================================
        //==========================================================================================================================
        void OnMapClick(GoogleMapClickEventArgs args)
        {
            spinning = true;
            IsDisabledRoute = true;
            IsDisabledSection = true;
            IsDisabledDirection = true;
            IsDisabledYear = true;
            isPause = true;
            log = 0;
            RouteInfo.Clear();

            Images.Clear();
            //ImagesRight.Clear();
            //ImagesLeft.Clear();
            pageModel.Clear();
            //pageModel = new PageModel();
            if (latitudeId > 36.5 || latitudeId < 33 || longitudeId < -94.66 || longitudeId > -89.629890) //make sure it's in state or default to a position
            {
                latitudeId = 34.751354;
                longitudeId = -92.274592;
            }
            RouteInfo = controller.GetRouteInformation(latitudeId, longitudeId);
            routeId = RouteInfo[0];
            sectionId = RouteInfo[1];
            directionId = RouteInfo[2];
            yearId = RouteInfo[3];
            logmile = Convert.ToDouble(RouteInfo[4]);
            latitudeId = Convert.ToDouble(RouteInfo[5]);
            longitudeId = Convert.ToDouble(RouteInfo[6]);
            log = logmile * 0.000621371;

            pageModel.Route = routeId;
            pageModel.Direction = directionId;
            pageModel.Section = sectionId;
            pageModel.Year = yearId;
            pageModel.Logmeter = logmile;
            pageModel.Latitude = latitudeId;
            pageModel.Longitude = longitudeId;
            pageModel.Ld = (long)Convert.ToDouble(RouteInfo[7]); //dains Ld
            pageModel.Lu = (long)Convert.ToDouble(RouteInfo[8]);// dains Lu
            var dataModel = controller.getData(pageModel); //dataModel.Roadway, dataModel.Points, dataModel.PointData

            var allPoints = from r in dataModel.Points //4772
                            select r.Ld;

            var allPointsBefore = from r in dataModel.Points
                                  where r.Logmeter0 < pageModel.Logmeter
                                  orderby r.Logmeter0 ascending
                                  select r.Ld;

            //need to make sure these Lds exsist as pointData.Lus
            //count number of missing values
            var frontImagesLu = from r in dataModel.PointData //grabs all the front facing images for the route
                                join p in dataModel.Points on r.Lu equals p.Ld
                                where r.FieldName == "f"
                                orderby r.Lu ascending
                                select r.Lu;

            var PointData = frontImagesLu.ToList();
            var Points = allPoints.ToList();

            var setDiff = Points.Except(PointData);
            var setDiffLst = setDiff.ToList();

            var allPointsBeforeLst = allPointsBefore.ToList();
            allPointsBeforeLst = controller.removePoints(allPointsBeforeLst, setDiffLst);

            var IdxB = allPointsBeforeLst.Count(); //4759 points before

            var frontImages = from r in dataModel.PointData //grabs all the front facing images for the route
                              join p in dataModel.Points on r.Lu equals p.Ld
                              where r.FieldName == "f"
                              orderby r.Lu ascending
                              select r.FieldValue;

            //var leftImages = from r in dataModel.PointData //grabs all the front facing images for the route
            //                 join p in dataModel.Points on r.Lu equals p.Ld
            //                 where r.FieldName == "fr"
            //                 orderby r.Lu ascending
            //                 select r.FieldValue;

            //var rightImages = from r in dataModel.PointData //grabs all the front facing images for the route
            //                  join p in dataModel.Points on r.Lu equals p.Ld
            //                  where r.FieldName == "fl"
            //                  orderby r.Lu ascending
            //                  select r.FieldValue;


            var logmeters = from r in dataModel.PointData //grabs all the front facing images for the route
                            join p in dataModel.Points on r.Lu equals p.Ld
                            where r.FieldName == "f"
                            orderby r.Lu ascending
                            select p.Logmeter0;

            var latitudes = from r in dataModel.PointData //grabs all the front facing images for the route
                            join p in dataModel.Points on r.Lu equals p.Ld
                            where r.FieldName == "f"
                            orderby r.Lu ascending
                            select p.Latitude;

            var longitudes = from r in dataModel.PointData //grabs all the front facing images for the route
                             join p in dataModel.Points on r.Lu equals p.Ld
                             where r.FieldName == "f"
                             orderby r.Lu ascending
                             select p.Longitude;


            var frontImagesStr = frontImages.ToList();
            //var rightImagesStr = rightImages.ToList();
            //var leftImagesStr = leftImages.ToList();

            var logmetersLst = logmeters.ToList();
            var latitudesLst = latitudes.ToList();
            var longitudesLst = longitudes.ToList();
            var logmetersStr = logmetersLst.Select(x => x.ToString());
            var latitudesStr = latitudesLst.Select(x => x.ToString());
            var longitudesStr = longitudesLst.Select(x => x.ToString());

            for (var i = 0; i < frontImagesStr.Count(); i++)
            {
                frontImagesStr[i] = controller.ModifyURLs(frontImagesStr[i]);
                //rightImagesStr[i] = controller.ModifyURLs(rightImagesStr[i]);
                //leftImagesStr[i] = controller.ModifyURLs(leftImagesStr[i]);
            }

            List<string> swappedPoints = controller.SplitReverse(frontImagesStr, IdxB);

            //List<string> swappedPointsR = controller.SplitReverse(rightImagesStr, IdxB);

            //List<string> swappedPointsL = controller.SplitReverse(leftImagesStr, IdxB);

            List<string> swappedLogmeters = controller.SplitReverse(logmetersStr.ToList(), IdxB);
            List<string> swappedLatitudes = controller.SplitReverse(latitudesStr.ToList(), IdxB);
            List<string> swappedLongitudes = controller.SplitReverse(longitudesStr.ToList(), IdxB);

            Images = swappedPoints;
            //ImagesRight = swappedPointsR;
            //ImagesLeft = swappedPointsL;
            Logmeters = swappedLogmeters;
            Latitudes = swappedLatitudes;
            Longitudes = swappedLongitudes;

            spinning = false;
        }
        //==========================================================================================================================
        //==========================================================================================================================
        //==========================================================================================================================

        async Task AsyncMapOperation(GoogleMapClickEventArgs args)    // this is an async task
        {
            spinning = true;
            Images.Clear();

            clickedPosition = $"Map clicked LAT : {args.Position.Lat}, LNG: {args.Position.Lng}";
            latitudeId = args.Position.Lat;
            longitudeId = args.Position.Lng;
            showArkansasMarker = true;
            IsDisabledDirection = false;
            IsDisabledSection = false;
            IsDisabledYear = false;
            zoom = 15;
            await Task.Run(() => OnMapClick(args));  //<--here!
            currentCount++;
            spinning = false;
        }

        void OnMarkerClick(GoogleMapClickEventArgs args)
        {
            clickedPosition = $"Map clicked LAT : {args.Position.Lat}, LNG: {args.Position.Lng}";
        }
        async Task AsyncMarkerOperation(GoogleMapClickEventArgs args)    // this is an async task
        {
            spinning = true;
            await Task.Run(() => OnMarkerClick(args));  //<--here!
            currentCount++;
            spinning = false;
        }
        //=======================================================================================

        public int idx;
        IEnumerable<int> negativeValues = new int[] { -100, 100 };
        int value = 0;
        int negativeValue = 0;
        int valueWithStep = 30;
        double logmile { get; set; }
        double log { get; set; }
        private List<string> counties;
        private List<string> routes;
        private List<string> sections;
        private List<string> directions;
        private List<string> years;
        //private List<string> cameraSelections = new List<string>() { "f", "fl", "fr", "p" };
        private int currentCount = 0;
        private Timer time;
        public bool loaded = false;
        public bool isPlay = false;
        public bool isReverse = false;
        public bool isPause = true;
        public bool spinning;
        public bool IsDisabledSubmit = true;

        mmhisContext db = new mmhisContext();

        public string routeId;
        public string directionId;
        public string sectionId;
        public string yearId;
        public string imgId;
        public double longitudeId = -92.199997;
        public double latitudeId = 34.799999;
        //public string cameraSelection;
        protected bool IsDisabledRoute = false;
        protected bool IsDisabledDirection = true;
        protected bool IsDisabledSection = true;
        protected bool IsDisabledYear = true;
        public List<string> Images = new List<string>();
        //public List<string> ImagesLeft = new List<string>();
        //public List<string> ImagesRight = new List<string>();

        protected override void OnInitialized()
        {
            routes = controller.GetUniqueRoutes();
            sections = controller.GetUniqueSections();
            years = controller.GetUniqueYears();
            directions = controller.GetUniqueDirections();
            IsDisabledSection = true;
            IsDisabledYear = true;
            IsDisabledDirection = true;
        }

        void ClearSelection()
        {
            routeId = null; //could try null
            sectionId = null;
            directionId = null;
            yearId = null;
            IsDisabledDirection = true;
            IsDisabledSection = true;
            IsDisabledYear = true;
            isPlay = false;
            isReverse = false;
            time.Enabled = false;
            showArkansasMarker = false;
            zoom = 8;
            Images.Clear();
            pageModel = new PageModel();
        }

        protected override async Task OnAfterRenderAsync(bool firstRender)
        {
            if (firstRender)
            {
                //return Task.Delay(0);
                await JSRuntime.InvokeVoidAsync("setTitle", "Arkansas Highway Viewer");
            }
        }

        public void routeChanged(string routeEvent)
        {
            //need to check values of all fields for valid combinations
            IsDisabledDirection = false;
            routeId = routeEvent;
            sections.Clear();
            var direct = db.MmhisDamus.Select(r => r).Where(r => r.Route == routeEvent);
            directions = direct.Select(r => r.MmhisDirection).Distinct().ToList();
            IsDisabledRoute = true;
        }

        public void directionChanged(string directionEvent)
        {
            IsDisabledSection = false;
            directionId = directionEvent;
            sections.Clear();
            var sect = db.MmhisDamus.Select(r => r).Where(r => r.Route == routeId);
            sect = sect.Where(r => r.MmhisDirection == directionId);
            sections = sect.Select(r => r.Section).Distinct().ToList();
            IsDisabledDirection = true;
        }

        public void sectionChanged(string sectionEvent)
        {
            IsDisabledYear = false;
            sectionId = sectionEvent;
            years.Clear();
            var year = db.MmhisDamus.Select(r => r).Where(r => r.Section == sectionEvent);
            year = year.Where(r => r.Route == routeId);
            year = year.Where(r => r.MmhisDirection == directionId);
            year = year.Where(r => r.Section == sectionId);
            years = year.Select(r => r.TheYear).Distinct().OrderByDescending(x => x).ToList();
            IsDisabledSection = true;

        }

        public void yearChanged(string yearEvent)
        {
            yearId = yearEvent;
            IsDisabledSubmit = false;
        }
        //==========================================================================================================================
        //==========================================================================================================================
        //==========================================================================================================================
        public void findInitialPoint()
        {

            IsDisabledDirection = true;
            IsDisabledSection = true;
            IsDisabledYear = true;
            IsDisabledRoute = true;
            pageModel.Route = routeId;
            pageModel.Direction = directionId;
            pageModel.Section = sectionId;
            pageModel.Year = yearId;
            pageModel.Logmeter = logmile;
            pageModel.Latitude = latitudeId;
            pageModel.Longitude = longitudeId;
            var dataModel = controller.getData(pageModel); //dataModel.Roadway, dataModel.Points, dataModel.PointData

            var lat = from r in dataModel.Points
                      select r.Latitude;
            var lng  = from r in dataModel.Points
                       select r.Longitude;
            var log = from r in dataModel.Points
                      select r.Logmeter0;

            logmile = log.FirstOrDefault() * 0.000621371;

            latitudeId = Convert.ToDouble(lat.FirstOrDefault());
            longitudeId = Convert.ToDouble(lng.FirstOrDefault());

            var dianLds = from r in dataModel.Points
                          select r.Ld;

            var frontImages = from r in dataModel.PointData
                              where r.FieldName == "f"                          //want to make sure each point corresponds to the correct Ld in dians
                              select r.FieldValue;

            var latitudes = from r in dataModel.PointData //grabs all the front facing images for the route
                            join p in dataModel.Points on r.Lu equals p.Ld
                            where r.FieldName == "f"
                            orderby r.Lu ascending
                            select p.Latitude;

            var longitudes = from r in dataModel.PointData //grabs all the front facing images for the route
                             join p in dataModel.Points on r.Lu equals p.Ld
                             where r.FieldName == "f"
                             orderby r.Lu ascending
                             select p.Longitude;

            var frontImagesStr = frontImages.ToList();
            var logmetersLst = log.ToList();
            var latitudesLst = latitudes.ToList();
            var longitudesLst = longitudes.ToList();
            var logmetersStr = logmetersLst.Select(x => x.ToString());
            var latitudesStr = latitudesLst.Select(x => x.ToString());
            var longitudesStr = longitudesLst.Select(x => x.ToString());

            for (var i = 0; i < frontImagesStr.Count(); i++)
            {
                frontImagesStr[i] = controller.ModifyURLs(frontImagesStr[i]);
            }

            Images = frontImagesStr;
            Logmeters = logmetersStr.ToList();
            Latitudes = latitudesStr.ToList();
            Longitudes = longitudesStr.ToList();

            if (pageModel.Logmeter > 0)
            {
                var allPoints = from r in dataModel.Points //4772
                                select r.Ld;

                var allPointsBefore = from r in dataModel.Points
                                      where r.Logmeter0 <= pageModel.Logmeter
                                      orderby r.Logmeter0 ascending
                                      select r.Ld;

                //need to make sure these Lds exsist as pointData.Lus
                //count number of missing values
                var frontImagesLu = from r in dataModel.PointData //grabs all the front facing images for the route
                                    join p in dataModel.Points on r.Lu equals p.Ld
                                    where r.FieldName == "f"
                                    orderby r.Lu ascending
                                    select r.Lu;
                var logmeters = from r in dataModel.PointData //grabs all the front facing images for the route
                                join p in dataModel.Points on r.Lu equals p.Ld
                                where r.FieldName == "f"
                                orderby r.Lu ascending
                                select p.Logmeter0;

                var PointData = frontImagesLu.ToList();
                var Points = allPoints.ToList();

                var setDiff = Points.Except(PointData);
                var setDiffLst = setDiff.ToList();

                var allPointsBeforeLst = allPointsBefore.ToList();
                allPointsBeforeLst = controller.removePoints(allPointsBeforeLst, setDiffLst);

                var IdxB = allPointsBeforeLst.Count(); //4759 points before

                for (var i = 0; i < frontImagesStr.Count(); i++)
                {
                    frontImagesStr[i] = controller.ModifyURLs(frontImagesStr[i]);
                }
                List<string> swappedPoints = controller.SplitReverse(frontImagesStr, IdxB);
                List<string> swappedLogmeters = controller.SplitReverse(logmetersStr.ToList(), IdxB);
                List<string> swappedLatitudes = controller.SplitReverse(latitudesStr.ToList(), IdxB);
                List<string> swappedLongitudes = controller.SplitReverse(longitudesStr.ToList(), IdxB);

                Images = swappedPoints;
                Logmeters = swappedLogmeters;
                Latitudes = swappedLatitudes;
                Longitudes = swappedLongitudes;
            }

        }
        //==========================================================================================================================
        //==========================================================================================================================
        //==========================================================================================================================

        async Task AsyncLongOperation()    // this is an async task
        {
            spinning = true;
            Images.Clear();
            await Task.Run(() => findInitialPoint());  //<--here!
            showArkansasMarker = true;
            currentCount++;
            spinning = false;
        }

        async Task AsyncClearAll()    // this is an async task
        {
            spinning = true;
            await Task.Run(() => ClearSelection());  //<--here!
            currentCount++;
            spinning = false;

            //await JSRuntime.InvokeVoidAsync("Clear");
        }

        void OnChange(dynamic value, string name)
        {
            var str = value is IEnumerable ? string.Join(", ", value) : value;
            str = Convert.ToString(str);
            if(str == "1")
            {
                pageModel.ImageSelection = "f";
            }
            else if(str == "2")
            {
                pageModel.ImageSelection = "fl";
            }
            else if(str == "3")
            {
                pageModel.ImageSelection = "fr";
            }
            //pageModel.ImageSelection = str;

        }

        void OnChangeLogmeter(dynamic value, string name)
        {
            var str = value is IEnumerable ? string.Join(", ", value) : value;
            str = Convert.ToString(str);
            logmile = Convert.ToDouble(str) * 1609.34;

        }

        void OnSubmitPlay()
        {
            if (Images.Any())
            {
                if(isPause == false)
                {
                    isReverse = false;
                    isPlay = true;
                    time.Enabled = true;
                    idx = idx + 1 >= Images.Count() ? 0 : idx + 1;
                }
                else
                {
                    OnSubmitStop();
                }
            }
        }

        void OnSubmitReverse()
        {
            if (Images.Any())
            {
                if(isPause == false)
                {
                    isPlay = false;
                    isReverse = true;
                    //isPause = !isPause;
                    time.Enabled = true;
                    idx = idx - 1 < 0 ? Images.Count() - 1 : idx - 1;
                }
                else
                {
                    OnSubmitStop();
                }

            }
        }

        void OnSubmitStop()
        {
            isPlay = false;
            isReverse = false;
            time.Enabled = false;
        }

        protected override void OnAfterRender(bool firstRender)
        {
            if (firstRender)
            {
                time = new Timer();
                //Set the time interval.
                time.Interval = 180;
                time.Elapsed += OnTimeInterval;
                time.AutoReset = true;
                // Start the timer.
                //time.Enabled = false;
            }
            base.OnAfterRender(firstRender);
        }

        private async void OnTimeInterval(object sender, ElapsedEventArgs e)
        {
            if (isPlay == true)
            {
                //showArkansasMarker = true;
                OnSubmitPlay();
            }
            if (isReverse == true)
            {
                OnSubmitReverse();
            }
            if(isPause == true)
            {
                OnSubmitStop();
            }

            await InvokeAsync(() => StateHasChanged());
        }

        public void Dispose()
        {
            // While navigating to other components, Dispose method will be called and clean up the Timer function.
            time?.Dispose();
        }


    }
