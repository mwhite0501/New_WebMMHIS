@page "/"
@using Radzen
@using Radzen.Blazor;
@using System.Collections;
@using System.Timers;
@using System.IO;
@using System;
@using Newtonsoft.Json;
@using ImageResizer; 
@using System.Drawing;
@using System.Net.NetworkInformation;
@using System.Net;
@using System.Drawing.Imaging
@using Microsoft.Extensions.Configuration;

@inject IJSRuntime JSRuntime
@inject MmhisController controller
@inject PageModel pageModel

@implements IDisposable


<meta charset="utf-8">

<button class="openbtn" onclick="openNav()">&#9776; Search</button>

<div id="main" style="margin-left: 250px">
    @if(IsLandscapeMode == false) //==========================================LANDSCAPE MODE OFF: DEFAULT====================================================
    {
        <div class="outer-div">
        @if (spinning == true)
        {
            <div class="spinner"></div>
        }


        @if (Images.Any())
        {
            if (notes != null && !string.IsNullOrWhiteSpace(notes.FirstOrDefault()))
            {
                    <p style="color:red"><b>NOTE: @notes.FirstOrDefault().ToUpper()</b></p>
            }
            
            //zoom=15;
            int maxslide = Logmeters.Count();
            //if(!File.Exists(unmodifiedURLs[idx])){idx++;}
            //if(!File.Exists("\\\\mmhisdata-01\\" + unmodifiedURLs[idx].Substring(7))) { idx++; } //need to throw a missing frame img
            switch(imgType)
            {
            case 1:
                //StateHasChanged();
                var byteArrayRight = ConvertImageToByteArray("\\\\mmhisdata-01\\" + unmodifiedURLsRight[idx].Substring(7)); //fix index out of range on older routes
                if(isHighRes == false)
                {
                    var resizedArrayRight = ResizeImage(byteArrayRight);
                    string imgStringRight = Convert.ToBase64String(resizedArrayRight);
                    <img src="data:image/jpg;base64, @imgStringRight" style="width: 100%; height: auto;"  onwheel="@HandleWheelEvent" @ref="imgElement"/>
                }
                else
                {
                    string imgStringRight = Convert.ToBase64String(byteArrayRight);
                    <img src="data:image/jpg;base64, @imgStringRight" style="width: 100%; height: auto;" onwheel="@HandleWheelEvent" @ref="imgElement"/>
                }
                break;
            case 2:
                var byteArrayLeft = ConvertImageToByteArray("\\\\mmhisdata-01\\" + unmodifiedURLsLeft[idx].Substring(7)); //fix index out of range on older routes
                if(isHighRes == false)
                {
                    var resizedArrayLeft = ResizeImage(byteArrayLeft); 
                    string imgStringLeft = Convert.ToBase64String(resizedArrayLeft);
                    <img src="data:image/jpg;base64, @imgStringLeft" style="width: 100%; height: auto;" onwheel="@HandleWheelEvent" @ref="imgElement"/>
                }
                else
                {
                    string imgStringLeft = Convert.ToBase64String(byteArrayLeft);
                    <img src="data:image/jpg;base64, @imgStringLeft" style="width: 100%; height: auto;" onwheel="@HandleWheelEvent" @ref="imgElement"/>
                }
                break;
            case 3:
                var byteArrayRRight = ConvertImageToByteArray("\\\\mmhisdata-01\\" + unmodifiedURLsRRight[idx].Substring(7));
                if(isHighRes == false)
                {
                    var resizedArrayRRight = ResizeImage(byteArrayRRight);
                    string imgStringRRight = Convert.ToBase64String(resizedArrayRRight);
                    <img src="data:image/jpg;base64, @imgStringRRight" style="width: 100%; height: auto;" onwheel="@HandleWheelEvent" @ref="imgElement"/>
                }
                else
                {
                    string imgStringRRight = Convert.ToBase64String(byteArrayRRight);
                    <img src="data:image/jpg;base64, @imgStringRRight" style="width: 100%; height: auto;" onwheel="@HandleWheelEvent" @ref="imgElement"/>
                }
                break;
            case 4:
                var byteArrayRLeft = ConvertImageToByteArray("\\\\mmhisdata-01\\" + unmodifiedURLsRLeft[idx].Substring(7));
                if(isHighRes == false)
                {
                    var resizedArrayRLeft = ResizeImage(byteArrayRLeft); 
                    string imgStringRLeft = Convert.ToBase64String(resizedArrayRLeft);
                    <img src="data:image/jpg;base64, @imgStringRLeft" style="width: 100%; height: auto;" onwheel="@HandleWheelEvent" @ref="imgElement"/>
                }
                else
                {
                    string imgStringRLeft = Convert.ToBase64String(byteArrayRLeft);
                    <img src="data:image/jpg;base64, @imgStringRLeft" style="width: 100%; height: auto;" onwheel="@HandleWheelEvent" @ref="imgElement"/>

                }
                break;
            case 5:
                var byteArrayPave = ConvertImageToByteArray("\\\\mmhisdata-01\\" + unmodifiedURLsPave[idx].Substring(7));
                if(isHighRes == false)
                {
                    var resizedArrayPave = ResizeImage(byteArrayPave);
                    string imgStringPave = Convert.ToBase64String(resizedArrayPave);
                    <img src="data:image/jpg;base64, @imgStringPave" style="width: 100%; height: auto;" onwheel="@HandleWheelEvent" @ref="imgElement"/>
                }
                else
                {
                    string imgStringPave = Convert.ToBase64String(byteArrayPave);
                    <img src="data:image/jpg;base64, @imgStringPave" style="width: 100%; height: auto;" onwheel="@HandleWheelEvent" @ref="imgElement"/>
                }
                break;
            default:
                var byteArray = ConvertImageToByteArray("\\\\mmhisdata-01\\" +unmodifiedURLs[idx].Substring(7));
                if(isHighRes == false)
                {
                    var resizedArray = ResizeImage(byteArray);
                    string imgString = Convert.ToBase64String(resizedArray);
                            <img src="data:image/jpg;base64, @imgString" style="width: 100%;" onwheel="@HandleWheelEvent" @ref="imgElement" />
                }
                else
                {
                    string imgString = Convert.ToBase64String(byteArray);
                    <img src="data:image/jpg;base64, @imgString" style="width: 100%;" onwheel="@HandleWheelEvent" @ref="imgElement"/>
                }
                break;
        }

        <RadzenSlider class="playprogress" @bind-Value="@idx" Style="width:100%;height:35px" Max="@maxslide"></RadzenSlider>

        log = double.Parse(Logmeters[idx]) * .000621371; //meter to mile conversion
        latitudeId = double.Parse(Latitudes[idx]);
        longitudeId = double.Parse(Longitudes[idx]);

        }
        @if (Images.Any()) //check if there are any images loaded in the list, then display these buttons
        {
                if(isMobile == true) //check if a mobile device is not detected. JSInterop was used
                {
                    <menu class="medium">
                    <button class="rw"  @ontouchstart="() => { idx = idx - 1 < 0 ? Logmeters.Count() - 1 : idx - 1; isPause = true; }" @onclick="UpdateMapWithCoordinates"></button>
                    <button class="play" style="transform: rotate(180deg); transform: rotateY(180deg);" @ontouchstart="() => { isPause = !isPause; OnSubmitReverse(); isTouchScreen = true; }"></button>
                    <button class="pause" @ontouchstart="() => {for(int i = 0; i<4;i++){isPause=true;}}"></button>
                    <button class="play" @ontouchstart="() => { isPause = !isPause; OnSubmitPlay(); isTouchScreen = true; }"></button>
                    <button class="ff"  @ontouchstart="() => { idx = idx + 1 >= Logmeters.Count() ? 0 : idx + 1; isPause = true; }" @onclick="UpdateMapWithCoordinates"></button>
                    </menu>
                }
                else if(isMobile == false)
                {
                    <menu class="small">
                    <button class="rw"  @onmousedown="() => { idx = idx - 1 < 0 ? Logmeters.Count() - 1: idx - 1; isPause = true; }" @onclick="UpdateMapWithCoordinates"></button>
                    <button class="play" style="transform: rotate(180deg); transform: rotateY(180deg);" @onmousedown="() => { isPause = !isPause; OnSubmitReverse(); isTouchScreen = true; }"></button>
                    <button class="pause" @onmousedown="() => {for(int i = 0; i<4;i++){isPause=true;}}"></button>
                    <button class="play" @onmousedown="() => { isPause = !isPause; OnSubmitPlay(); isTouchScreen = true; }"></button>
                    <button class="ff"  @onmousedown="() => { idx = idx + 1 >= Logmeters.Count() ? 0 : idx + 1; isPause = true; }" @onclick="UpdateMapWithCoordinates"></button>
                    </menu>
                }

        }
        <div class="inner-div">
            <div class="col-xl-6">
                @*<RadzenGoogleMap ApiKey="@apiKey" Style="width: 1000px; height: 740px; z-index: 1;" id="Map" Zoom="@zoom" Center="@(new GoogleMapPosition() { Lat = latitudeId, Lng = longitudeId })" MapClick="@AsyncMapOperation">
                    <Markers>
                        @if (showArkansasMarker && Images.Any())
                        {
                            <RadzenGoogleMapMarker Title="Arkansas" Position="@(new GoogleMapPosition() { Lat = Convert.ToDouble(Latitudes[idx]), Lng = Convert.ToDouble(Longitudes[idx]) })" />
                        }
                    </Markers>
                </RadzenGoogleMap>*@
                <div id="viewDiv"></div>
                <div id="infoDiv">
                  <input
                    class="esri-component esri-widget--button esri-widget esri-interactive"
                    type="button"
                    id="switch-btn"
                    value="3D"
                  />
                </div>
                <div id="toolbarDiv" class="esri-component esri-widget">
                  <button id="distance" class="esri-widget--button esri-interactive esri-icon-measure-line" title="Distance Measurement Tool">
                  </button>
                  <button id="area" class="esri-widget--button esri-interactive esri-icon-measure-area" title="Area Measurement Tool">
                  </button>
                  <button id="clear" class="esri-widget--button esri-interactive esri-icon-trash" title="Clear Measurements">
                  </button>
                
            </div>
            </div>
                <div>
                    Select Feature Layer: <select id="feature-layer-select">
                    <option value="https://gis.ardot.gov/hosting/rest/services/SIR_TIS/Road_Inventory_OnSystem/FeatureServer/0">Roadway Inventory</option>
                    <option value="https://gis.ardot.gov/hosting/rest/services/TPP_GISMapping/ARNOLD/FeatureServer/0">ARNOLD Linear</option>
                    <option value="https://gis.ardot.gov/hosting/rest/services/Hosted/ARNOLD_Points/FeatureServer/0">ARNOLD Points</option>
                    <option value="https://gis.ardot.gov/hosting/rest/services/TPP_GISMapping/CORE_BASE_LAYERS/FeatureServer">Core Base Layers</option>
                    <option value="https://gis.arkansas.gov/arcgis/rest/services/FEATURESERVICES/Boundaries/FeatureServer/48">Counties</option>
                    <option value="https://gis.arkansas.gov/arcgis/rest/services/FEATURESERVICES/Boundaries/FeatureServer/41">Municipal Boundries</option>
                    <option value="https://gis.arkansas.gov/arcgis/rest/services/FEATURESERVICES/Planning_Cadastre/FeatureServer/6">Parcel (Ownership) Boundries</option>
                    <option value="https://gis.arkansas.gov/arcgis/rest/services/FEATURESERVICES/Structure/FeatureServer/54">Building Footprints</option>
                    <option value="https://gis.arkansas.gov/arcgis/rest/services/FEATURESERVICES/Location/FeatureServer/14">Address Points</option>
                    <option value="https://fragis.fra.dot.gov/arcgis/rest/services/FRA/MainLine/MapServer/0">Railroads</option>
                    <option value="https://gis.ardot.gov/hosting/rest/services/HeavyBridge/BridePublicView_OnRecords/MapServer/0">Bridges</option>
                </select>
                </div>
                <div>
                Select Basemap: <select id="basemap-select">
                    <option value="streets">Streets</option>
                    <option value="satellite">Satellite</option>
                    <option value="hybrid">Hybrid</option>
                    <option value="terrain">Terrain</option>
                    <option value="topo">Topographic</option>
                    <option value="gray">Gray</option>
                    <option value="dark-gray">Dark Gray</option>
                    <option value="oceans">Oceans</option>
                    <option value="national-geographic">National Geographic</option>
                </select>
                </div>

        </div>
    </div>
    }
     @if(IsLandscapeMode == true) //==============================================LANDSCAPE MODE ON=====================================================
    {
        
        <div class="row">
        <div class="column">
                <div class="image-and-buttons">
                @if (spinning == true)
                {
                    <div class="spinner"></div>
                }
                @if (Images.Any())
                {
                    //zoom = 13;
                    int maxslide = Logmeters.Count() - 1;
                    //if (!File.Exists("\\\\mmhisdata-01\\" + unmodifiedURLs[idx].Substring(7))) { idx++; }
                    switch(imgType)
                    {
                    case 1:
                        var byteArrayRight = ConvertImageToByteArray("\\\\mmhisdata-01\\" + unmodifiedURLsRight[idx].Substring(7));
                        if(isHighRes == false)
                        {
                            var resizedArrayRight = ResizeImage(byteArrayRight);
                            string imgStringRight = Convert.ToBase64String(resizedArrayRight);
                            <img src="data:image/jpg;base64, @imgStringRight" style="width: 100%; height: auto;" onwheel="@HandleWheelEvent" @ref="imgElement"/>
                        }
                        else
                        {
                            string imgStringRight = Convert.ToBase64String(byteArrayRight);
                            <img src="data:image/jpg;base64, @imgStringRight" style="width: 100%; height: auto;" onwheel="@HandleWheelEvent" @ref="imgElement"/>
                        }
                        break;
                    case 2:
                        var byteArrayLeft = ConvertImageToByteArray("\\\\mmhisdata-01\\" + unmodifiedURLsLeft[idx].Substring(7));
                        if(isHighRes == false)
                        {
                            var resizedArrayLeft = ResizeImage(byteArrayLeft); 
                            string imgStringLeft = Convert.ToBase64String(resizedArrayLeft);
                            <img src="data:image/jpg;base64, @imgStringLeft" style="width: 100%; height: auto;" onwheel="@HandleWheelEvent" @ref="imgElement"/>
                        }
                        else
                        {
                            string imgStringLeft = Convert.ToBase64String(byteArrayLeft);
                            <img src="data:image/jpg;base64, @imgStringLeft" style="width: 100%; height: auto;" onwheel="@HandleWheelEvent" @ref="imgElement"/>
                        }
                        break;
                    case 3:
                        var byteArrayRRight = ConvertImageToByteArray("\\\\mmhisdata-01\\" + unmodifiedURLsRRight[idx].Substring(7));
                        if(isHighRes == false)
                        {
                            var resizedArrayRRight = ResizeImage(byteArrayRRight);
                            string imgStringRRight = Convert.ToBase64String(resizedArrayRRight);
                            <img src="data:image/jpg;base64, @imgStringRRight" style="width: 100%; height: auto;" onwheel="@HandleWheelEvent"@ref="imgElement"/>
                        }
                        else
                        {
                            string imgStringRRight = Convert.ToBase64String(byteArrayRRight);
                            <img src="data:image/jpg;base64, @imgStringRRight" style="width: 100%; height: auto;" onwheel="@HandleWheelEvent" @ref="imgElement"/>
                        }
                        break;
                    case 4:
                        var byteArrayRLeft = ConvertImageToByteArray("\\\\mmhisdata-01\\" + unmodifiedURLsRLeft[idx].Substring(7));
                        if(isHighRes == false)
                        {
                            var resizedArrayRLeft = ResizeImage(byteArrayRLeft); 
                            string imgStringRLeft = Convert.ToBase64String(resizedArrayRLeft);
                            <img src="data:image/jpg;base64, @imgStringRLeft" style="width: 100%; height: auto;" onwheel="@HandleWheelEvent" @ref="imgElement"/>
                        }
                        else
                        {
                            string imgStringRLeft = Convert.ToBase64String(byteArrayRLeft);
                            <img src="data:image/jpg;base64, @imgStringRLeft" style="width: 100%; height: auto;" onwheel="@HandleWheelEvent" @ref="imgElement"/>

                        }
                        break;
                    case 5:
                        var byteArrayPave = ConvertImageToByteArray("\\\\mmhisdata-01\\" + unmodifiedURLsPave[idx].Substring(7));
                        if(isHighRes == false)
                        {
                            var resizedArrayPave = ResizeImage(byteArrayPave);
                            string imgStringPave = Convert.ToBase64String(resizedArrayPave);
                            <img src="data:image/jpg;base64, @imgStringPave" style="width: 100%; height: auto;" onwheel="@HandleWheelEvent" @ref="imgElement"/>
                        }
                        else
                        {
                            string imgStringPave = Convert.ToBase64String(byteArrayPave);
                            <img src="data:image/jpg;base64, @imgStringPave" style="width: 100%; height: auto;" onwheel="@HandleWheelEvent" @ref="imgElement"/>
                        }
                        break;
                    default:
                        var byteArray = ConvertImageToByteArray("\\\\mmhisdata-01\\" + unmodifiedURLs[idx].Substring(7));
                        if(isHighRes == false)
                        {
                            var resizedArray = ResizeImage(byteArray);
                            string imgString = Convert.ToBase64String(resizedArray);
                            <img src="data:image/jpg;base64, @imgString" style="width: 100%;" onwheel="@HandleWheelEvent" @ref="imgElement"/>
                        }
                        else
                        {
                            string imgString = Convert.ToBase64String(byteArray);
                            <img src="data:image/jpg;base64, @imgString" style="width: 100%;" onwheel="@HandleWheelEvent" @ref="imgElement"/>
                        }
                        break;
                    }

                    <RadzenSlider class="playprogress" @bind-Value="@idx" Style="width:100%;height:35px" Max="@maxslide"></RadzenSlider>
            
                    log = double.Parse(Logmeters[idx]) * 0.000621371192;
                    latitudeId = double.Parse(Latitudes[idx]);
                    longitudeId = double.Parse(Longitudes[idx]);

                }
                </div>
        </div>
        <div class="column">
            <div class="col-xl-6">
                @*<RadzenGoogleMap ApiKey="@apiKey" Style="width: 700px; height:450px" id="Map" Zoom="@zoom" Center="@(new GoogleMapPosition() { Lat = latitudeId, Lng = longitudeId})" MapClick="@AsyncMapOperation">
                    <Markers>
                        @if (showArkansasMarker && Images.Any())
                        {
                            <RadzenGoogleMapMarker Title="Arkansas" Position="@(new GoogleMapPosition() { Lat = Convert.ToDouble(Latitudes[idx]), Lng = Convert.ToDouble(Longitudes[idx]) })" />
                        }
                    </Markers>
                </RadzenGoogleMap>*@
                    <div id="viewDiv"></div>
                    <div id="infoDiv">
                        <input class="esri-component esri-widget--button esri-widget esri-interactive"
                           type="button"
                           id="switch-btn"
                           value="3D" />
                    </div>
                    <div id="toolbarDiv" class="esri-component esri-widget">
                        <button id="distance" class="esri-widget--button esri-interactive esri-icon-measure-line" title="Distance Measurement Tool">
                        </button>
                        <button id="area" class="esri-widget--button esri-interactive esri-icon-measure-area" title="Area Measurement Tool">
                        </button>
                        <button id="clear" class="esri-widget--button esri-interactive esri-icon-trash" title="Clear Measurements">
                        </button>
                    </div>
                    <div>
                    Select Feature Layer: <select id="feature-layer-select">
                    <option value="https://gis.ardot.gov/hosting/rest/services/SIR_TIS/Road_Inventory_OnSystem/FeatureServer/0">Roadway Inventory</option>
                    <option value="https://gis.ardot.gov/hosting/rest/services/TPP_GISMapping/ARNOLD/FeatureServer/0">ARNOLD Linear</option>
                    <option value="https://gis.ardot.gov/hosting/rest/services/Hosted/ARNOLD_Points/FeatureServer/0">ARNOLD Points</option>
                    <option value="https://gis.ardot.gov/hosting/rest/services/TPP_GISMapping/CORE_BASE_LAYERS/FeatureServer">Core Base Layers</option>
                    <option value="https://gis.arkansas.gov/arcgis/rest/services/FEATURESERVICES/Boundaries/FeatureServer/48">Counties</option>
                    <option value="https://gis.arkansas.gov/arcgis/rest/services/FEATURESERVICES/Boundaries/FeatureServer/41">Municipal Boundries</option>
                    <option value="https://gis.arkansas.gov/arcgis/rest/services/FEATURESERVICES/Planning_Cadastre/FeatureServer/6">Parcel (Ownership) Boundries</option>
                    <option value="https://gis.arkansas.gov/arcgis/rest/services/FEATURESERVICES/Structure/FeatureServer/54">Building Footprints</option>
                    <option value="https://gis.arkansas.gov/arcgis/rest/services/FEATURESERVICES/Location/FeatureServer/14">Address Points</option>
                    <option value="https://fragis.fra.dot.gov/arcgis/rest/services/FRA/MainLine/MapServer/0">Railroads</option>
                    <option value="https://gis.ardot.gov/hosting/rest/services/HeavyBridge/BridePublicView_OnRecords/MapServer/0">Bridges</option>
                </select>
                </div>
                <div>
                Select Basemap: <select id="basemap-select">
                    <option value="streets">Streets</option>
                    <option value="satellite">Satellite</option>
                    <option value="hybrid">Hybrid</option>
                    <option value="terrain">Terrain</option>
                    <option value="topo">Topographic</option>
                    <option value="gray">Gray</option>
                    <option value="dark-gray">Dark Gray</option>
                    <option value="oceans">Oceans</option>
                    <option value="national-geographic">National Geographic</option>
                </select>
                </div>
            </div>
        </div>
        @if (Images.Any()) //if there are any images loaded in the list, display these images
        {
            if(isMobile == true) //if a mobile device is not detected. JSInterop was used.
            {
                <menu class="medium">
                <button class="rw"  @ontouchstart="() => { idx = idx - 1 < 0 ? Logmeters.Count() - 1 : idx - 1; isPause = true; }" @onclick="UpdateMapWithCoordinates"></button>
                <button class="play" style="transform: rotate(180deg); transform: rotateY(180deg);" @ontouchstart="() => { isPause = !isPause; OnSubmitReverse(); isTouchScreen = true; }"></button>
                <button class="pause" @ontouchstart="() => {isPause = true;}"></button>
                <button class="play" @ontouchstart="() => { isPause = !isPause; OnSubmitPlay(); isTouchScreen = true; }"></button>
                <button class="ff"  @ontouchstart="() => { idx = idx + 1 >= Logmeters.Count() ? 0 : idx + 1; isPause = true; }" @onclick="UpdateMapWithCoordinates"></button>
                </menu>
            }
            else if(isMobile == false)
            {
                <menu class="small">
                <button class="rw"  @onmousedown="() => { idx = idx - 1 < 0 ? Logmeters.Count() - 1 : idx - 1; isPause = true; }" @onclick="UpdateMapWithCoordinates"></button>
                <button class="play" style="transform: rotate(180deg); transform: rotateY(180deg);" @onmousedown="() => { isPause = !isPause; OnSubmitReverse(); isTouchScreen = true; }"></button>
                <button class="pause" @onmousedown="() => {isPause = true;}"></button>
                <button class="play" @onmousedown="() => { isPause = !isPause; OnSubmitPlay(); isTouchScreen = true; }"></button>
                <button class="ff"  @onmousedown="() => { idx = idx + 1 >= Logmeters.Count() ? 0 : idx + 1; isPause = true; }" @onclick="UpdateMapWithCoordinates"></button>
                </menu>
            }
        }
    </div>
    }@*=================================================================END LANDSCAPE MODE=====================================================================*@
    <br>
    <div id="mySidebar" class="sidebar">
        <a href="javascript:void(0)" class="closebtn" onclick="closeNav()">&times;</a>
        <img src="/Images/ArDOT_Logo_1.png" style="width: 200px; padding-left: 50px; padding-bottom: 25px; " />
        <ul class="nav flex-column">
            <EditForm Model="@controller" OnValidSubmit="AsyncLongOperation">
@*                <li class="nav-item px-2">
                    <InputSelect id="countyControl" Value="countyId" ValueChanged="@( (string s) => countyChanged(s))" ValueExpression="@( () => countyId)" class="form-control" @onkeydown="HandleKeyDown">
                        <option value="none">County</option>
                        @foreach (var item in counties)
                        {
                            <option value="@item">@item - @CountiesLookup[Int32.Parse(@item)]</option>
                        }
                    </InputSelect>
                </li>*@

                <li class="nav-item px-2">
                    <InputSelect id="routeControl" Value="routeId" ValueChanged="@( (string s) => routeChanged(s))" ValueExpression="@( () => routeId)" class="form-control" @onkeydown="HandleKeyDown">
                        <option value="none">Route</option>
                        @foreach (var item in routes)
                        {
                            <option value="@item">@item</option>
                        }
                    </InputSelect>
                </li>
                <li class="nav-item px-2">
                    <InputSelect Value="sectionId" ValueChanged="@( (string s) => sectionChanged(s))" ValueExpression="@( () => sectionId)" class="form-control" @onkeydown="HandleKeyDown">
                        <option value="none">Section</option>
                        @foreach (var item in sections)
                        {
                            <option value="@item">@item</option>
                        }
                    </InputSelect>
                </li>
                <li class="nav-item px-2">
                    <InputSelect Value="directionId" ValueChanged="@( (string s) => directionChanged(s))" ValueExpression="@( () => directionId)" class="form-control" @onkeydown="HandleKeyDown">
                        <option value="none">Direction</option>
                        @foreach (var item in directions)
                        {
                            <option value="@item">@item</option>
                        }
                    </InputSelect>
                </li>

                <li class="nav-item px-2">
                    <InputSelect Value="yearId" ValueChanged="@( (string s) => yearChanged(s))" ValueExpression="@( () => yearId)" class="form-control">
                        <option value="none">Year</option>
                        @foreach (var item in years)
                        {
                            <option value="@item">@item</option>
                        }
                    </InputSelect>
                </li>
                <li class="nav-item px-2">
                    <RadzenTextBox Placeholder="Search Logmile" Name="Logmile" @bind-Value="@searchText" Change=@(args => OnChangeLogmeter(args, "TextBox with placeholder")) />
                </li>
                <li class="nav-item px-2" style="padding-bottom: 20px">
                    <input type="submit" class="btn btn-primary" value="Submit" disabled="@IsDisabledSubmit" />
                    <input type="reset" onclick="window.location.reload()" class="btn btn-primary" style="position: relative; " value="Clear" />
                </li>
                <li class="nav-item px-2" style="color:white">
                    Camera Selection: <InputSelect @bind-Value="imgType">
                                          <option value=1 label="Right">Right</option>
                                          <option value=2 label="Left">Left</option>
                                          <option value=3 label="Rear Right">Rear Right</option>
                                          <option value=4 label="Rear Left">Rear Left</option>
                                          <option value=5 label="Pavement">Pavement</option>
                                          <option value=6 label="Center">Center</option>
                                      </InputSelect>
                </li>
                <li class="nav-item px-2" style="color:white">
                    Beginning Logmile: <RadzenTextBox Placeholder="BegLog" Name="BegLog" ReadOnly="true" Value="@Math.Round(begLogmile, 3).ToString()" />
                </li>
                <li class="nav-item px-2" style="color:white">
                    Ending Logmile:  <RadzenTextBox Placeholder="EndLog" Name="EndLog" ReadOnly="true" Value="@Math.Round(endLogmile, 3).ToString()"/>
                </li>
                <li class="nav-item px-2" style="color:white">
                    Current Logmile:  <RadzenTextBox Placeholder="CurLog" Name="CurLog" ReadOnly="true" Value="@Math.Round(log, 3).ToString()"/>
                </li>
                <li class="nav-item px-2" style="color:white">
                    Latitude: <RadzenTextBox Placeholder="Latitude" Name="Lat" ReadOnly="true" Value="@latitudeId.ToString()"/>
                </li>
                <li class="nav-item px-2" style="color:white">
                    Longitude:  <RadzenTextBox Placeholder="Longitude" Name="Long" ReadOnly="true" Value="@longitudeId.ToString()"/>
                </li>
                <li class="nav-item px-2" style="padding-bottom: 20px; padding-top:20px; color:white">
                    Full Resolution Mode:<RadzenSwitch @bind-Value=@isHighRes  Style="float: right; margin-left: 5px;"/>
                </li>
                @*<li class="nav-item px-2" style="padding-bottom: 20px; color:white">
                    Landscape Mode:<RadzenSwitch ValueChanged="@updateAfterLandscape" Style="float: right; margin-left: 5px;"/>
                </li>*@
                @if (isMobile == true) { imgQuality = 377; }
                <li class="nav-item px-2" style="padding-bottom: 10px; color:white">
                     Image Quality: <InputSelect @bind-Value="imgQuality" style="float: right; margin-left: 5px;">
                                          <option value=377 label="Low">Low</option>
                                          <option value=600 label="Medium">Medium</option>
                                          <option value=900 label="High">High</option>
                     </InputSelect>
                </li>
                @if(isMobile == true){ imgSpeed = 400; }
                <li class="nav-item px-2" style="padding-bottom: 10px; color:white">
                     Route Speed: <InputSelect @bind-Value="imgSpeed" style="float: right; margin-left: 5px;">
                                          <option value=400 label="Slow">Slow</option>
                                          <option value=220 label="Medium">Medium</option>
                                          <option value=100 label="Fast">Fast</option>
                     </InputSelect>
                </li>
                <li class="nav-item px-2" style="padding-bottom: 10px; color:white">
                     Map Zoom:
                     <RadzenSlider @bind-Value=@zoom TValue="int" Step="1" Min="8" Max="20" Change=@(args => OnChange(args, "Slider from 0 to 100")) Class="w-100" />
                </li>
                <li class="nav-item px-2" style="padding-bottom: 10px; color:white">
                    Contrast:
                    <RadzenSlider @bind-Value=@contrast TValue="float" Step=".1" Min="1" Max="3" Change=@(args => OnChange(args, "Slider from 0 to 100")) Class="w-100" />
                </li>
            </EditForm>
        </ul>
    </div>

</div>



@code{



    string feature = "";



    private async Task UpdateMapWithCoordinates()
    {

        // Call the 'updateMap' JavaScript function with the latitude and longitude

        await JSRuntime.InvokeVoidAsync("updateMap", latitudeId, longitudeId);

    }

    async Task updateAfterLandscape()
    {
        IsLandscapeMode = !IsLandscapeMode;
        //await JSRuntime.InvokeVoidAsync("setMap");
        //await JSRuntime.InvokeVoidAsync("updateMap", latitudeId, longitudeId); //should pass feature into this instead of setMap

    }



    private ElementReference imgElement;
    private string searchText = "";
    private int selectedIndex = 0;
    private void HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "ArrowUp" && selectedIndex > 0)
        {
            selectedIndex--;
        }
        else if (e.Key == "ArrowDown" && selectedIndex < counties.Count - 1)
        {
            selectedIndex++;
        }
        else
        {
            return;
        }

    }
    string[] CountiesLookup = {"","Arkansas","Ashley","Baxter","Benton","Boone","Bradley","Calhoun","Carroll",
                               "Chicot","Clark","Clay","Cleburne","Cleveland","Columbia",
                               "Conway","Craighead","Crawford","Crittenden","Cross","Dallas",
                               "Desha","Drew","Faulkner","Franklin","Fulton","Garland","Grant",
                               "Greene","Hempstead","Hot Spring","Howard","Independence","Izard","Jackson",
                               "Jefferson","Johnson","Lafayette","Lawrence","Lee","Lincoln",
                               "Little River","Logan","Lonoke","Madison","Marion","Miller","Mississippi",
                               "Monroe","Montgomery","Nevada","Newton","Ouachita","Perry",
                               "Phillips","Pike","Poinsett","Polk","Pope","Prairie","Pulaski",
                               "Randolph","Saline","Scott","Searcy","Sebastian","Sevier","Sharp",
                               "St.Francis","Stone","Union","Van Buren","Washington","White","Woodruff","Yell"};

    protected string apiKey = new ConfigurationBuilder().AddJsonFile("appsettings.json").Build().GetSection("Keys")["GoogleMapsJavascript"];
    bool isMobile;
    bool isHighRes = true;
    bool switchMap = false;
    float contrast = 1;
    float imgQuality=600; 
    int imgSpeed=220;
    int imgType=6;
    List<string> resizedImageStrings = new List<string>();
    PageModel model;

    //map settings ====================================================================================================================================================================
    int zoom = 8;
    bool showArkansasMarker;
    bool playpause = false;
    string clickedPosition = "";
    bool isTouchScreen;
    List<string> RouteInfo = new List<string>();
    List<string> Logmeters = new List<string>();
    List<string> Latitudes = new List<string>();
    List<string> Longitudes = new List<string>();
    List<string> modifiedURLs = new List<string>();
    List<string> unmodifiedURLs = new List<string>();
    List<string> unmodifiedURLsRight = new List<string>();
    List<string> unmodifiedURLsLeft = new List<string>();
    List<string> unmodifiedURLsRRight = new List<string>();
    List<string> unmodifiedURLsRLeft = new List<string>();
    List<string> unmodifiedURLsPave = new List<string>();

    public int idx;
    IEnumerable<int> negativeValues = new int[] { -100, 100 };
    int value = 0;
    int negativeValue = 0;
    int valueWithStep = 30;
    double begLogmile { get; set; }
    double endLogmile { get; set; }
    double logmile { get; set; }
    double log { get; set; }
    private List<string> counties;
    private List<string> routes;
    private List<string> sections;
    private List<string> directions;
    private List<string> years;

    private int currentCount = 0;
    private Timer time;
    public bool loaded = false;
    public bool isPlay = false;
    public bool isReverse = false;
    public bool isPause = true;
    public bool spinning;
    public bool IsDisabledSubmit = true;
    public bool displayRight = false;
    public bool displayLeft = false;
    public bool displayCenter = true; //display center camera by default

    mmhisContext db = new mmhisContext();

    public string routeId;
    public string directionId;
    public string sectionId;
    public string yearId;
    public string imgId;
    public double longitudeId = -92.199997;
    public double latitudeId = 34.799999;
    public int missingLogmeters;
    public string countyId;

    protected bool IsDisabledRoute = false;
    protected bool IsDisabledDirection = true;
    protected bool IsDisabledSection = true;
    protected bool IsDisabledYear = true;
    protected bool IsDisabledLog = true;
    protected bool IsLandscapeMode = false;
    private bool _previousIsLandscapeMode;

    //Cameras 
    public List<string> Images = new List<string>();             
    public List<string> ImagesLeft = new List<string>();         
    public List<string> ImagesRight = new List<string>();        
    public List<string> ImagesRearLeft = new List<string>();
    public List<string> ImagesRearRight = new List<string>();
    public List<string> ImagesPavement = new List<string>();
    public List<string> notes = new List<string>();

    //=================================================================================================================================================================================
    //==================================================Map Selection Method===========================================================================================================
    //=================================================================================================================================================================================





    void OnMapClick(GoogleMapClickEventArgs args)
    {
        spinning = true;
        IsDisabledRoute = true;
        IsDisabledSection = true;
        IsDisabledDirection = true;
        IsDisabledYear = true;
        IsDisabledLog = true;
        isPause = true;
        log = 0;
        RouteInfo.Clear();
        idx = 0;
        zoom = 15;

        Images.Clear();
        ImagesRight.Clear();
        ImagesLeft.Clear();
        ImagesRearLeft.Clear();
        ImagesRearRight.Clear();
        ImagesPavement.Clear();
        pageModel.Clear();

        if (latitudeId > 36.5 || latitudeId < 33 || longitudeId < -94.66 || longitudeId > -89.629890) //make sure it's in state of arkansas or default to a position
        {
            latitudeId = 34.751354;
            longitudeId = -92.274592;
        }

        RouteInfo = controller.GetRouteInformation(latitudeId, longitudeId);
        routeId = RouteInfo[0]; //should probably pass in a model here
        sectionId = RouteInfo[1];
        directionId = RouteInfo[2];
        yearId = RouteInfo[3];
        logmile = Convert.ToDouble(RouteInfo[4]);
        latitudeId = Convert.ToDouble(RouteInfo[5]);
        longitudeId = Convert.ToDouble(RouteInfo[6]);
        log = logmile * 0.000621371192;
        countyId = (RouteInfo[10]);

        pageModel.Route = routeId;
        pageModel.Direction = directionId;
        pageModel.Section = sectionId;
        pageModel.Year = yearId;
        pageModel.Logmeter = logmile;
        pageModel.Latitude = latitudeId;
        pageModel.Longitude = longitudeId;
        pageModel.Ld = (long)Convert.ToDouble(RouteInfo[7]); //dains Ld
        pageModel.Lu = (long)Convert.ToDouble(RouteInfo[8]);// dains Lu
        pageModel.County = countyId;

        var dataModel = controller.getData(pageModel); //dataModel.Roadway, dataModel.Points, dataModel.PointData, dataModel.Notes

        var pointDataList = dataModel.PointData.ToList();

        var dianQuery = from dian in dataModel.Points //get all points in route at 5 meter increments
                        select dian.Ld;

        var fenQueryF = from fen in dataModel.PointData //get all points where there is a front camera
                        join dain in dataModel.Points on fen.Lu equals dain.Ld
                        where fen.FieldName == "f"
                        select fen.Lu;

        var fenQueryFR = from fen in dataModel.PointData //front right
                         join dain in dataModel.Points on fen.Lu equals dain.Ld
                         where fen.FieldName == "fr"
                         select fen.Lu;

        var fenQueryFL = from fen in dataModel.PointData //front left
                         join dain in dataModel.Points on fen.Lu equals dain.Ld
                         where fen.FieldName == "fl"
                         select fen.Lu;

        var fenQueryRR = from fen in dataModel.PointData //rear right
                         join dain in dataModel.Points on fen.Lu equals dain.Ld
                         where fen.FieldName == "rr"
                         select fen.Lu;

        var fenQueryRL = from fen in dataModel.PointData //rear left
                         join dain in dataModel.Points on fen.Lu equals dain.Ld
                         where fen.FieldName == "rl"
                         select fen.Lu;

        var fenQueryP = from fen in dataModel.PointData
                        join dain in dataModel.Points on fen.Lu equals dain.Ld
                        where fen.FieldName == "p"
                        select fen.Lu;

        var resultF = dianQuery.Except(fenQueryF);
        var resultFR = dianQuery.Except(fenQueryFR);
        var resultFL = dianQuery.Except(fenQueryFL);
        var resultRR = dianQuery.Except(fenQueryRR);
        var resultRL = dianQuery.Except(fenQueryRL);
        var resultP = dianQuery.Except(fenQueryP);

        foreach (var item in resultF)
        {
            var newFen = new MmhisFen
                {
                    Lu = item,
                    Lt = 0,
                    FieldCategory = "f",
                    FieldName = "f",
                    FieldValue = "\\\\san2\\MMHIS Data3\\mw42705\\No_Image_Available.jpg"

                };
            pointDataList.Add(newFen);
        }

        foreach (var item in resultFR)
        {
            var newFen = new MmhisFen
                {
                    Lu = item,
                    Lt = 0,
                    FieldCategory = "f",
                    FieldName = "fr",
                    FieldValue = "\\\\san2\\MMHIS Data3\\mw42705\\No_Image_Available.jpg"

                };
            pointDataList.Add(newFen);
        }

        foreach (var item in resultFL)
        {
            var newFen = new MmhisFen
                {
                    Lu = item,
                    Lt = 0,
                    FieldCategory = "f",
                    FieldName = "fl",
                    FieldValue = "\\\\san2\\MMHIS Data3\\mw42705\\No_Image_Available.jpg"

                };
            pointDataList.Add(newFen);
        }

        foreach (var item in resultRR)
        {
            var newFen = new MmhisFen
                {
                    Lu = item,
                    Lt = 0,
                    FieldCategory = "f",
                    FieldName = "rr",
                    FieldValue = "\\\\san2\\MMHIS Data3\\mw42705\\No_Image_Available.jpg"

                };
            pointDataList.Add(newFen);
        }

        foreach (var item in resultRL)
        {
            var newFen = new MmhisFen
                {
                    Lu = item,
                    Lt = 0,
                    FieldCategory = "f",
                    FieldName = "rl",
                    FieldValue = "\\\\san2\\MMHIS Data3\\mw42705\\No_Image_Available.jpg"

                };
            pointDataList.Add(newFen);
        }

        foreach (var item in resultP)
        {
            var newFen = new MmhisFen
                {
                    Lu = item,
                    Lt = 0,
                    FieldCategory = "f",
                    FieldName = "p",
                    FieldValue = "\\\\san2\\MMHIS Data3\\mw42705\\No_Image_Available.jpg"

                };
            pointDataList.Add(newFen);
        }

        dataModel.PointData = pointDataList.OrderBy(x => x.Lu).AsQueryable();

        pointDataList = dataModel.PointData.ToList();
        var pointList = dataModel.Points.ToList();
        var allPoints = from r in pointList
                        select r.Ld;

        var allPointsBefore = from r in pointList
                              where r.Logmeter0 <= pageModel.Logmeter
                              orderby r.Logmeter0 ascending
                              select r.Ld;

        //need to make sure these Lds exsist as pointData.Lus
        //count number of missing values

        var frontImagesLu = from r in pointDataList//grabs all the front facing images for the route
                            join p in pointList on r.Lu equals p.Ld
                            where r.FieldName == "f" //f = front facing camera
                            orderby r.Lu ascending
                            select r.Lu;

        var PointData = frontImagesLu.ToList();
        var Points = allPoints.ToList();

        var setDiff = Points.Except(PointData);
        var setDiffLst = setDiff.ToList();

        var allPointsBeforeLst = allPointsBefore.ToList();

        var IdxB = allPointsBeforeLst.Count(); 

        var frontImages = from r in pointDataList //grabs all the front facing images for the route
                          join p in pointList on r.Lu equals p.Ld
                          where r.FieldName == "f"
                          orderby r.Lu ascending
                          select r.FieldValue;

        var leftImages = from r in pointDataList 
                         join p in pointList on r.Lu equals p.Ld
                         where r.FieldName == "fl"
                         orderby r.Lu ascending
                         select r.FieldValue;

        var rightImages = from r in pointDataList
                          join p in pointList on r.Lu equals p.Ld
                          where r.FieldName == "fr"
                          orderby r.Lu ascending
                          select r.FieldValue;

        var leftRearImages = from r in pointDataList
                             join p in pointList on r.Lu equals p.Ld
                             where r.FieldName == "rl"
                             orderby r.Lu ascending
                             select r.FieldValue;

        var rightRearImages = from r in pointDataList
                              join p in pointList on r.Lu equals p.Ld
                              where r.FieldName == "rr"
                              orderby r.Lu ascending
                              select r.FieldValue;

        var pavementImages = from r in pointDataList
                             join p in pointList on r.Lu equals p.Ld
                             where r.FieldName == "p"
                             orderby r.Lu ascending
                             select r.FieldValue;

        //var logmeters = from r in pointDataList                   //r = mmhisfens(picture location)
        //                join p in pointList on r.Lu equals p.Ld  //p = mmhisdian(log, lat, long)
        //                where r.FieldName == "f"
        //                orderby r.Lu ascending
        //                select p.Logmeter0;

        var logmeters = from r in pointList
                        orderby r.Logmeter0
                        select r.Logmeter0;

        //missingLogmeters = frontImages.Count() - logmeters.Count();

        var latitudes = from r in pointDataList
                        join p in pointList on r.Lu equals p.Ld
                        where r.FieldName == "f"
                        orderby r.Lu ascending
                        select p.Latitude;

        var longitudes = from r in pointDataList
                         join p in pointList on r.Lu equals p.Ld
                         where r.FieldName == "f"
                         orderby r.Lu ascending
                         select p.Longitude;


        var frontImagesStr = frontImages.ToList();
        var rightImagesStr = rightImages.ToList();
        var leftImagesStr = leftImages.ToList();
        var rearLeftImagesStr = leftRearImages.ToList();
        var rearRightImagesStr = rightRearImages.ToList();
        var pavementImagesStr = pavementImages.ToList();

        var logmetersLst = logmeters.ToList();
        var latitudesLst = latitudes.ToList();
        var longitudesLst = longitudes.ToList();
        var logmetersStr = logmetersLst.Select(x => x.ToString());
        var latitudesStr = latitudesLst.Select(x => x.ToString());
        var longitudesStr = longitudesLst.Select(x => x.ToString());

        begLogmile = logmetersLst.First() * 0.000621371;
        endLogmile = logmetersLst.Last() * 0.000621371;

        List<string> preloadImgcpy = frontImagesStr; //unmodified URLs
        List<string> swappedpreloadImgcpy = controller.PutFrontAtIndex(preloadImgcpy, IdxB);

        List<string> swappedPoints = controller.PutFrontAtIndex(frontImagesStr, IdxB);
        List<string> swappedPointsRight = controller.PutFrontAtIndex(rightImagesStr, IdxB); 
        List<string> swappedPointsLeft = controller.PutFrontAtIndex(leftImagesStr, IdxB);
        if (rearRightImagesStr.Any())
        {
            List<string> swappedPointsRearRight = controller.PutFrontAtIndex(rearRightImagesStr, IdxB);
            unmodifiedURLsRRight = swappedPointsRearRight;
            ImagesRearRight = swappedPointsRearRight;
        }
        if (rearLeftImagesStr.Any())
        {
            List<string> swappedPointsRearLeft = controller.PutFrontAtIndex(rearLeftImagesStr, IdxB);
            unmodifiedURLsRLeft = swappedPointsRearLeft;
            ImagesRearLeft = swappedPointsRearLeft;
        }
        if (pavementImagesStr.Any())
        {
            List<string> swappedPointsPavement = controller.PutFrontAtIndex(pavementImagesStr, IdxB);
            unmodifiedURLsPave = swappedPointsPavement;
            ImagesPavement = swappedPointsPavement;
        }

        List<string> swappedLogmeters = controller.PutFrontAtIndex(logmetersStr.ToList(), IdxB);
        List<string> swappedLatitudes = controller.PutFrontAtIndex(latitudesStr.ToList(), IdxB);
        List<string> swappedLongitudes = controller.PutFrontAtIndex(longitudesStr.ToList(), IdxB);

        unmodifiedURLs = swappedPoints;
        unmodifiedURLsRight = swappedPointsRight;
        unmodifiedURLsLeft = swappedPointsLeft;     

        Images = swappedPoints;
        ImagesRight = swappedPointsRight;
        ImagesLeft = swappedPointsLeft;


        Logmeters = swappedLogmeters;
        Latitudes = swappedLatitudes;
        Longitudes = swappedLongitudes;

        directionChanged(pageModel.Direction); //used to correctly populate the year drop down

        spinning = false;
        IsDisabledLog = false;
        IsDisabledSubmit = false;

    }


    async Task AsyncMapOperation(GoogleMapClickEventArgs args) 
    {
        spinning = true;
        Images.Clear();

        clickedPosition = $"Map clicked LAT : {args.Position.Lat}, LNG: {args.Position.Lng}";
        latitudeId = args.Position.Lat;
        longitudeId = args.Position.Lng;
        showArkansasMarker = true;
        IsDisabledDirection = false;
        IsDisabledSection = false;
        IsDisabledYear = false;
        //zoom = 15;
        await Task.Run(() => OnMapClick(args));  //<--here!
                                                 //await JSRuntime.InvokeVoidAsync("updateMap", latitudeId, longitudeId); //working but not initializing to first point
        currentCount++;
        spinning = false;
    }

    void OnMarkerClick(GoogleMapClickEventArgs args)
    {
        clickedPosition = $"Map clicked LAT : {args.Position.Lat}, LNG: {args.Position.Lng}";
    }

    async Task AsyncMarkerOperation(GoogleMapClickEventArgs args)    // this is an async task
    {
        spinning = true;
        await Task.Run(() => OnMarkerClick(args));  //<--here!
        currentCount++;
        spinning = false;
    }

    //=================================================================================================================================================================================

    async Task LoadImageAsync(string pathway)
    {
        await JSRuntime.InvokeVoidAsync("loadImage", pathway);


        //return JSRuntime.InvokeVoidAsync("loadImage", pathway).ToString();
    }


    protected override void OnInitialized()
    {
        Interop.OnLatLngReceived += HandleLatLngReceived; //reference Interop.cs
        routes = controller.GetUniqueRoutes();
        sections = controller.GetUniqueSections();
        years = controller.GetUniqueYears();
        directions = controller.GetUniqueDirections();
        counties = controller.GetUniqueCounties();
        IsDisabledSection = true;
        IsDisabledYear = true;
        IsDisabledDirection = true;
    }
    //======================================================ArcGIS Map Click Selection================================================================================
    //======================================================ArcGIS Map Click Selection================================================================================
    //======================================================ArcGIS Map Click Selection================================================================================



    async void HandleLatLngReceived(double latitude, double longitude) //reference Interop.cs
    {
        // Your C# code to handle the received latitude and longitude values
        Images.Clear();
        spinning = true;
        //StateHasChanged();
        IsDisabledRoute = true;
        IsDisabledSection = true;
        IsDisabledDirection = true;
        IsDisabledYear = true;
        IsDisabledLog = true;
        isPause = true;
        log = 0;
        RouteInfo.Clear();
        idx = 0;
        zoom = 15;

        Images.Clear();
        ImagesRight.Clear();
        ImagesLeft.Clear();
        ImagesRearLeft.Clear();
        ImagesRearRight.Clear();
        ImagesPavement.Clear();
        pageModel.Clear();

        latitudeId = latitude;
        longitudeId = longitude;


        if (latitudeId > 36.5 || latitudeId < 33 || longitudeId < -94.66 || longitudeId > -89.629890) //make sure it's in state of arkansas or default to a position
        {
            latitudeId = 34.751354;
            longitudeId = -92.274592;
        }

        RouteInfo = controller.GetRouteInformation(latitudeId, longitudeId);
        routeId = RouteInfo[0]; //should probably pass in a model here
        sectionId = RouteInfo[1];
        directionId = RouteInfo[2];
        yearId = RouteInfo[3];
        logmile = Convert.ToDouble(RouteInfo[4]);
        latitudeId = Convert.ToDouble(RouteInfo[5]);
        longitudeId = Convert.ToDouble(RouteInfo[6]);
        log = logmile * 0.000621371192;
        countyId = (RouteInfo[10]);

        pageModel.Route = routeId;
        pageModel.Direction = directionId;
        pageModel.Section = sectionId;
        pageModel.Year = yearId;
        pageModel.Logmeter = logmile;
        pageModel.Latitude = latitudeId;
        pageModel.Longitude = longitudeId;
        pageModel.Ld = (long)Convert.ToDouble(RouteInfo[7]); //dains Ld
        pageModel.Lu = (long)Convert.ToDouble(RouteInfo[8]);// dains Lu
        pageModel.County = countyId;

        var dataModel = controller.getData(pageModel); //dataModel.Roadway, dataModel.Points, dataModel.PointData, dataModel.Notes

        var pointDataList = dataModel.PointData.ToList();

        var dianQuery = from dian in dataModel.Points //get all points in route at 5 meter increments
                        select dian.Ld;

        var fenQueryF = from fen in dataModel.PointData //get all points where there is a front camera
                        join dain in dataModel.Points on fen.Lu equals dain.Ld
                        where fen.FieldName == "f"
                        select fen.Lu;

        var fenQueryFR = from fen in dataModel.PointData //front right
                         join dain in dataModel.Points on fen.Lu equals dain.Ld
                         where fen.FieldName == "fr"
                         select fen.Lu;

        var fenQueryFL = from fen in dataModel.PointData //front left
                         join dain in dataModel.Points on fen.Lu equals dain.Ld
                         where fen.FieldName == "fl"
                         select fen.Lu;

        var fenQueryRR = from fen in dataModel.PointData //rear right
                         join dain in dataModel.Points on fen.Lu equals dain.Ld
                         where fen.FieldName == "rr"
                         select fen.Lu;

        var fenQueryRL = from fen in dataModel.PointData //rear left
                         join dain in dataModel.Points on fen.Lu equals dain.Ld
                         where fen.FieldName == "rl"
                         select fen.Lu;

        var fenQueryP = from fen in dataModel.PointData
                        join dain in dataModel.Points on fen.Lu equals dain.Ld
                        where fen.FieldName == "p"
                        select fen.Lu;

        var resultF = dianQuery.Except(fenQueryF);
        var resultFR = dianQuery.Except(fenQueryFR);
        var resultFL = dianQuery.Except(fenQueryFL);
        var resultRR = dianQuery.Except(fenQueryRR);
        var resultRL = dianQuery.Except(fenQueryRL);
        var resultP = dianQuery.Except(fenQueryP);

        foreach (var item in resultF)
        {
            var newFen = new MmhisFen
                {
                    Lu = item,
                    Lt = 0,
                    FieldCategory = "f",
                    FieldName = "f",
                    FieldValue = "\\\\san2\\MMHIS Data3\\mw42705\\No_Image_Available.jpg"

                };
            pointDataList.Add(newFen);
        }

        foreach (var item in resultFR)
        {
            var newFen = new MmhisFen
                {
                    Lu = item,
                    Lt = 0,
                    FieldCategory = "f",
                    FieldName = "fr",
                    FieldValue = "\\\\san2\\MMHIS Data3\\mw42705\\No_Image_Available.jpg"

                };
            pointDataList.Add(newFen);
        }

        foreach (var item in resultFL)
        {
            var newFen = new MmhisFen
                {
                    Lu = item,
                    Lt = 0,
                    FieldCategory = "f",
                    FieldName = "fl",
                    FieldValue = "\\\\san2\\MMHIS Data3\\mw42705\\No_Image_Available.jpg"

                };
            pointDataList.Add(newFen);
        }

        foreach (var item in resultRR)
        {
            var newFen = new MmhisFen
                {
                    Lu = item,
                    Lt = 0,
                    FieldCategory = "f",
                    FieldName = "rr",
                    FieldValue = "\\\\san2\\MMHIS Data3\\mw42705\\No_Image_Available.jpg"

                };
            pointDataList.Add(newFen);
        }

        foreach (var item in resultRL)
        {
            var newFen = new MmhisFen
                {
                    Lu = item,
                    Lt = 0,
                    FieldCategory = "f",
                    FieldName = "rl",
                    FieldValue = "\\\\san2\\MMHIS Data3\\mw42705\\No_Image_Available.jpg"

                };
            pointDataList.Add(newFen);
        }

        foreach (var item in resultP)
        {
            var newFen = new MmhisFen
                {
                    Lu = item,
                    Lt = 0,
                    FieldCategory = "f",
                    FieldName = "p",
                    FieldValue = "\\\\san2\\MMHIS Data3\\mw42705\\No_Image_Available.jpg"

                };
            pointDataList.Add(newFen);
        }

        dataModel.PointData = pointDataList.OrderBy(x => x.Lu).AsQueryable();

        pointDataList = dataModel.PointData.ToList();
        var pointList = dataModel.Points.ToList();
        var allPoints = from r in pointList
                        select r.Ld;

        var allPointsBefore = from r in pointList
                              where r.Logmeter0 <= pageModel.Logmeter
                              orderby r.Logmeter0 ascending
                              select r.Ld;

        //need to make sure these Lds exsist as pointData.Lus
        //count number of missing values

        var frontImagesLu = from r in pointDataList//grabs all the front facing images for the route
                            join p in pointList on r.Lu equals p.Ld
                            where r.FieldName == "f" //f = front facing camera
                            orderby r.Lu ascending
                            select r.Lu;

        var PointData = frontImagesLu.ToList();
        var Points = allPoints.ToList();

        var setDiff = Points.Except(PointData);
        var setDiffLst = setDiff.ToList();

        var allPointsBeforeLst = allPointsBefore.ToList();

        var IdxB = allPointsBeforeLst.Count();

        var frontImages = from r in pointDataList //grabs all the front facing images for the route
                          join p in pointList on r.Lu equals p.Ld
                          where r.FieldName == "f"
                          orderby r.Lu ascending
                          select r.FieldValue;

        var leftImages = from r in pointDataList
                         join p in pointList on r.Lu equals p.Ld
                         where r.FieldName == "fl"
                         orderby r.Lu ascending
                         select r.FieldValue;

        var rightImages = from r in pointDataList
                          join p in pointList on r.Lu equals p.Ld
                          where r.FieldName == "fr"
                          orderby r.Lu ascending
                          select r.FieldValue;

        var leftRearImages = from r in pointDataList
                             join p in pointList on r.Lu equals p.Ld
                             where r.FieldName == "rl"
                             orderby r.Lu ascending
                             select r.FieldValue;

        var rightRearImages = from r in pointDataList
                              join p in pointList on r.Lu equals p.Ld
                              where r.FieldName == "rr"
                              orderby r.Lu ascending
                              select r.FieldValue;

        var pavementImages = from r in pointDataList
                             join p in pointList on r.Lu equals p.Ld
                             where r.FieldName == "p"
                             orderby r.Lu ascending
                             select r.FieldValue;

        //var logmeters = from r in pointDataList                   //r = mmhisfens(picture location)
        //                join p in pointList on r.Lu equals p.Ld  //p = mmhisdian(log, lat, long)
        //                where r.FieldName == "f"
        //                orderby r.Lu ascending
        //                select p.Logmeter0;

        var logmeters = from r in pointList
                        orderby r.Logmeter0
                        select r.Logmeter0;

        //missingLogmeters = frontImages.Count() - logmeters.Count();

        var latitudes = from r in pointDataList
                        join p in pointList on r.Lu equals p.Ld
                        where r.FieldName == "f"
                        orderby r.Lu ascending
                        select p.Latitude;

        var longitudes = from r in pointDataList
                         join p in pointList on r.Lu equals p.Ld
                         where r.FieldName == "f"
                         orderby r.Lu ascending
                         select p.Longitude;


        var frontImagesStr = frontImages.ToList();
        var rightImagesStr = rightImages.ToList();
        var leftImagesStr = leftImages.ToList();
        var rearLeftImagesStr = leftRearImages.ToList();
        var rearRightImagesStr = rightRearImages.ToList();
        var pavementImagesStr = pavementImages.ToList();

        var logmetersLst = logmeters.ToList();
        var latitudesLst = latitudes.ToList();
        var longitudesLst = longitudes.ToList();
        var logmetersStr = logmetersLst.Select(x => x.ToString());
        var latitudesStr = latitudesLst.Select(x => x.ToString());
        var longitudesStr = longitudesLst.Select(x => x.ToString());

        begLogmile = logmetersLst.First() * 0.000621371;
        endLogmile = logmetersLst.Last() * 0.000621371;

        List<string> preloadImgcpy = frontImagesStr; //unmodified URLs
        List<string> swappedpreloadImgcpy = controller.PutFrontAtIndex(preloadImgcpy, IdxB);

        List<string> swappedPoints = controller.PutFrontAtIndex(frontImagesStr, IdxB);
        List<string> swappedPointsRight = controller.PutFrontAtIndex(rightImagesStr, IdxB);
        List<string> swappedPointsLeft = controller.PutFrontAtIndex(leftImagesStr, IdxB);
        if (rearRightImagesStr.Any())
        {
            List<string> swappedPointsRearRight = controller.PutFrontAtIndex(rearRightImagesStr, IdxB);
            unmodifiedURLsRRight = swappedPointsRearRight;
            ImagesRearRight = swappedPointsRearRight;
        }
        if (rearLeftImagesStr.Any())
        {
            List<string> swappedPointsRearLeft = controller.PutFrontAtIndex(rearLeftImagesStr, IdxB);
            unmodifiedURLsRLeft = swappedPointsRearLeft;
            ImagesRearLeft = swappedPointsRearLeft;
        }
        if (pavementImagesStr.Any())
        {
            List<string> swappedPointsPavement = controller.PutFrontAtIndex(pavementImagesStr, IdxB);
            unmodifiedURLsPave = swappedPointsPavement;
            ImagesPavement = swappedPointsPavement;
        }

        List<string> swappedLogmeters = controller.PutFrontAtIndex(logmetersStr.ToList(), IdxB);
        List<string> swappedLatitudes = controller.PutFrontAtIndex(latitudesStr.ToList(), IdxB);
        List<string> swappedLongitudes = controller.PutFrontAtIndex(longitudesStr.ToList(), IdxB);

        unmodifiedURLs = swappedPoints;
        unmodifiedURLsRight = swappedPointsRight;
        unmodifiedURLsLeft = swappedPointsLeft;

        Images = swappedPoints;
        ImagesRight = swappedPointsRight;
        ImagesLeft = swappedPointsLeft;


        Logmeters = swappedLogmeters;
        Latitudes = swappedLatitudes;
        Longitudes = swappedLongitudes;

        directionChanged(pageModel.Direction); //used to correctly populate the year drop down

        spinning = false;
        IsDisabledLog = false;
        IsDisabledSubmit = false;
        //StateHasChanged();
        await JSRuntime.InvokeVoidAsync("updateMap", latitudeId, longitudeId);
    }
    //======================================================ArcGIS Map Click Selection================================================================================
    //======================================================ArcGIS Map Click Selection================================================================================
    //======================================================ArcGIS Map Click Selection================================================================================
    

    void ClearSelection()
    {
        routeId = null; //could try null
        sectionId = null;
        directionId = null;
        yearId = null;
        IsDisabledDirection = true;
        IsDisabledSection = true;
        IsDisabledYear = true;
        isPlay = false;
        isReverse = false;
        time.Enabled = false;
        showArkansasMarker = false;
        zoom = 8;
        Images.Clear();
        pageModel = new PageModel();
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Set the flag to false initially
            //return Task.Delay(0);
            await JSRuntime.InvokeVoidAsync("setTitle", "Arkansas Highways");
            //await JSRuntime.InvokeVoidAsync("setMap");
            await JSRuntime.InvokeVoidAsync("initializeMap");
            //await JSRuntime.InvokeVoidAsync("updateMap");
            //isMobile = await JSRuntime.InvokeAsync<bool>("isDevice");
            isMobile = false;
            
            //StateHasChanged();

        }
        
    }

    public void countyChanged(string countyEvent)
    {
        countyId = countyEvent;
        var route = db.MmhisDamus.Select(r => r).Where(r => r.County == countyEvent);
        routes = route.Select(r => r.Route).Distinct().OrderBy(r => r.Length).ThenBy(o => o).ToList();
        routeChanged(routes.FirstOrDefault());
    }

    public void routeChanged(string routeEvent)
    {
        //need to check values of all fields for valid combinations
        IsDisabledSection = false;
        routeId = routeEvent;
        sections.Clear();
        directions.Clear();
        years.Clear();
        var direct = db.MmhisDamus.Select(r => r).Where(r => r.Route == routeEvent);
        sections = direct.Select(r => r.Section).Distinct().OrderBy(r => r.Length).ThenBy(o => o).ToList();
        sectionChanged(sections.FirstOrDefault());
        IsDisabledRoute = true;

    }

    public void sectionChanged(string sectionEvent)
    {
        IsDisabledDirection = false;
        sectionId = sectionEvent;
        var direct = db.MmhisDamus.Select(r => r).Where(r => r.Route == routeId);
        direct = direct.Where(r => r.Section == sectionId);
        directions = direct.Select(r => r.MmhisDirection).Distinct().OrderBy(r => r.Length).ThenBy(o => o).ToList();
        IsDisabledDirection = false;
        if(directionId == null || routeId == null)
        {
            IsDisabledSubmit = true;
        }
        directionChanged(directions.FirstOrDefault());

    }

    public void directionChanged(string directionEvent)
    {
        IsDisabledYear = false;
        directionId = directionEvent;
        years.Clear();
        var year = db.MmhisDamus.Select(r => r).Where(r => r.MmhisDirection == directionEvent);
        year = year.Where(r => r.Route == routeId);
        year = year.Where(r => r.MmhisDirection == directionId);
        year = year.Where(r => r.Section == sectionId);
        years = year.Select(r => r.TheYear).Distinct().OrderByDescending(x => x).ToList();
        IsDisabledSection = true;
        if(sectionId == null || directionId == null || routeId == null)
        {
            IsDisabledSubmit = true;
        }
        yearChanged(years.FirstOrDefault());
    }



    public void yearChanged(string yearEvent)
    {
        yearId = yearEvent;
        IsDisabledLog = false; //allow log search
        if(yearId == null || sectionId == null || directionId == null || routeId == null)
        {
            IsDisabledSubmit = true;
        }
        else{
            IsDisabledSubmit = false;
        }

    }

    //=================================================================================================================================================================================
    //===============================================Dropdown Selection Method=========================================================================================================
    //=================================================================================================================================================================================

    public void findInitialPoint()
    {
        idx = 0;
        IsDisabledDirection = true;
        IsDisabledSection = true;
        IsDisabledYear = true;
        IsDisabledRoute = true;
        pageModel.Route = routeId;
        pageModel.Direction = directionId;
        pageModel.Section = sectionId;
        pageModel.Year = yearId;
        pageModel.Logmeter = logmile;
        pageModel.Latitude = latitudeId;
        pageModel.Longitude = longitudeId;
        pageModel.County = countyId;
        bool isValid = true;
        var dataModel = controller.getData(pageModel); //dataModel.Roadway, dataModel.Points, dataModel.PointData

        if (dataModel == null)
        {
            //invalid input
            isValid = false;
            pageModel.Route = "70";
            pageModel.Direction = "A";
            pageModel.Section = "12";
            pageModel.Year = "2020-07";
            pageModel.Logmeter = 13830;
            pageModel.Latitude = 34.751865;
            pageModel.Longitude = -92.27451;
            pageModel.County = countyId;
            dataModel = controller.getData(pageModel);
        }


        var lat = from r in dataModel.Points
                  select r.Latitude;
        var lng  = from r in dataModel.Points
                  select r.Longitude;
        var log = from r in dataModel.Points
                  orderby r.Logmeter0
                  select r.Logmeter0;

        ///////////////////////<<<<<<<<<<<<<<<<<<<<<<<<<<< SELECT LOGMETERS WHERE NO IMAGES ARE STORED
        //var missingFrames = logmeters where there are no images
        /*SELECT * FROM dataModel.Points
         * WHERE dataModel.Points.Ld not in dataModel.PointData.lu
         * select all unique Points.Ld
         * select unique pointData.lu
         * Find the set differences
         * check each point for the missing frame
        */
        var pointDataList = dataModel.PointData.ToList();

        var dianQuery = from dian in dataModel.Points
                        select dian.Ld;

        var fenQueryF = from fen in dataModel.PointData
                        join dain in dataModel.Points on fen.Lu equals dain.Ld
                        where fen.FieldName == "f"
                        select fen.Lu;

        var fenQueryFR = from fen in dataModel.PointData
                         join dain in dataModel.Points on fen.Lu equals dain.Ld
                         where fen.FieldName == "fr"
                         select fen.Lu;

        var fenQueryFL = from fen in dataModel.PointData
                         join dain in dataModel.Points on fen.Lu equals dain.Ld
                         where fen.FieldName == "fl"
                         select fen.Lu;

        var fenQueryRR = from fen in dataModel.PointData
                         join dain in dataModel.Points on fen.Lu equals dain.Ld
                         where fen.FieldName == "rr"
                         select fen.Lu;

        var fenQueryRL = from fen in dataModel.PointData
                         join dain in dataModel.Points on fen.Lu equals dain.Ld
                         where fen.FieldName == "rl"
                         select fen.Lu;

        var fenQueryP = from fen in dataModel.PointData
                        join dain in dataModel.Points on fen.Lu equals dain.Ld
                        where fen.FieldName == "p"
                        select fen.Lu;

        var resultF = dianQuery.Except(fenQueryF);
        var resultFR = dianQuery.Except(fenQueryFR);
        var resultFL = dianQuery.Except(fenQueryFL);
        var resultRR = dianQuery.Except(fenQueryRR);
        var resultRL = dianQuery.Except(fenQueryRL);
        var resultP = dianQuery.Except(fenQueryP);


        foreach (var item in resultF)
        {
            var newFen = new MmhisFen
                {
                    Lu = item,
                    Lt = 0,
                    FieldCategory = "f",
                    FieldName = "f",
                    FieldValue = "\\\\san2\\MMHIS Data3\\mw42705\\No_Image_Available.jpg"

                };
            pointDataList.Add(newFen);
        }

        foreach (var item in resultFR)
        {
            var newFen = new MmhisFen
                {
                    Lu = item,
                    Lt = 0,
                    FieldCategory = "f",
                    FieldName = "fr",
                    FieldValue = "\\\\san2\\MMHIS Data3\\mw42705\\No_Image_Available.jpg"

                };
            pointDataList.Add(newFen);
        }

        foreach (var item in resultFL)
        {
            var newFen = new MmhisFen
                {
                    Lu = item,
                    Lt = 0,
                    FieldCategory = "f",
                    FieldName = "fl",
                    FieldValue = "\\\\san2\\MMHIS Data3\\mw42705\\No_Image_Available.jpg"

                };
            pointDataList.Add(newFen);
        }

        foreach (var item in resultRR)
        {
            var newFen = new MmhisFen
                {
                    Lu = item,
                    Lt = 0,
                    FieldCategory = "f",
                    FieldName = "rr",
                    FieldValue = "\\\\san2\\MMHIS Data3\\mw42705\\No_Image_Available.jpg"

                };
            pointDataList.Add(newFen);
        }

        foreach (var item in resultRL)
        {
            var newFen = new MmhisFen
                {
                    Lu = item,
                    Lt = 0,
                    FieldCategory = "f",
                    FieldName = "rl",
                    FieldValue = "\\\\san2\\MMHIS Data3\\mw42705\\No_Image_Available.jpg"

                };
            pointDataList.Add(newFen);
        }

        foreach (var item in resultP)
        {
            var newFen = new MmhisFen
                {
                    Lu = item,
                    Lt = 0,
                    FieldCategory = "f",
                    FieldName = "p",
                    FieldValue = "\\\\san2\\MMHIS Data3\\mw42705\\No_Image_Available.jpg"

                };
            pointDataList.Add(newFen);
        }

        dataModel.PointData = pointDataList.OrderBy(x => x.Lu).AsQueryable();


        logmile = log.FirstOrDefault() * 0.000621371;

        latitudeId = Convert.ToDouble(lat.FirstOrDefault());
        longitudeId = Convert.ToDouble(lng.FirstOrDefault());

        var dianLds = from r in dataModel.Points
                      select r.Ld;

        var frontImages = from r in dataModel.PointData
                          where r.FieldName == "f"                          
                          select r.FieldValue;
        var rightImages = from r in dataModel.PointData
                          where r.FieldName == "fr"                          
                          select r.FieldValue;
        var leftImages = from r in dataModel.PointData
                         where r.FieldName == "fl"                          
                         select r.FieldValue;
        var leftRearImages = from r in dataModel.PointData
                             where r.FieldName == "rl"                          
                             select r.FieldValue;
        var rightRearImages = from r in dataModel.PointData
                              where r.FieldName == "rr"                          
                              select r.FieldValue;
        var pavementImages = from r in dataModel.PointData
                             where r.FieldName == "p"                          
                             select r.FieldValue;

        var luValues = (from r in dataModel.PointData
                        where r.FieldName == "f"
                        select r.Lu).Distinct().ToList();

        var latitudes = (from p in dataModel.Points
                         where luValues.Contains(p.Ld)
                         orderby p.Lu ascending
                         select p.Latitude).ToList();

        var longitudes = (from p in dataModel.Points
                          where luValues.Contains(p.Ld)
                          orderby p.Lu ascending
                          select p.Longitude).ToList();

        if(dataModel.Notes.ToList() != null)
        {
            notes = dataModel.Notes.ToList();
        }

        if(isValid == false){
            notes.Insert(0, "INVALID INPUT - Default Route Selected. Please 'Clear' and make a new selection.");
        }

        var frontImagesStr = frontImages.ToList();
        var frontRightImagesStr = rightImages.ToList();
        var frontLeftImagesStr = leftImages.ToList();
        var rearLeftImagesStr = leftRearImages.ToList();
        var rearRightImagesStr = rightRearImages.ToList();
        var pavementImagesStr = pavementImages.ToList();

        var logmetersLst = log.ToList();
        var latitudesLst = latitudes.ToList();
        var longitudesLst = longitudes.ToList();
        var logmetersStr = logmetersLst.Select(x => x.ToString());
        var latitudesStr = latitudesLst.Select(x => x.ToString());
        var longitudesStr = longitudesLst.Select(x => x.ToString());

        begLogmile = logmetersLst.First() * 0.000621371;
        endLogmile = logmetersLst.Last() * 0.000621371;

        //for (var i = 0; i < frontImagesStr.Count(); i++)
        //{
        //    frontImagesStr[i] = controller.ModifyURLs(frontImagesStr[i]);
        //}
        unmodifiedURLs = frontImagesStr;
        unmodifiedURLsRight = frontRightImagesStr;
        unmodifiedURLsLeft = frontLeftImagesStr;
        unmodifiedURLsRRight = rearRightImagesStr;
        unmodifiedURLsRLeft = rearLeftImagesStr;
        unmodifiedURLsPave = pavementImagesStr;

        Images = frontImagesStr;
        ImagesRight = unmodifiedURLsRight;
        ImagesLeft = unmodifiedURLsLeft;
        ImagesRearRight = unmodifiedURLsRRight;
        ImagesRearLeft = unmodifiedURLsRLeft;
        ImagesPavement = unmodifiedURLsPave;

        Logmeters = logmetersStr.ToList();
        Latitudes = latitudesStr.ToList();
        Longitudes = longitudesStr.ToList();

        if (pageModel.Logmeter > 0) //if someone searches for a logmeter
        {
            //pointDataList = dataModel.PointData.ToList();
            var pointList = dataModel.Points.ToList();
            var allPoints = from r in pointList
                            select r.Ld;

            var allPointsBefore = from r in pointList 
                                  where r.Logmeter0 <= pageModel.Logmeter
                                  orderby r.Logmeter0 ascending
                                  select r.Ld;

            //need to make sure these Lds exsist as pointData.Lus
            //count number of missing values

            var frontImagesLu = from r in pointDataList//grabs all the front facing images for the route
                                join p in pointList on r.Lu equals p.Ld
                                where r.FieldName == "f" //f = front facing camera
                                orderby r.Lu ascending
                                select r.Lu;
            var logmeters = from r in pointList //grabs all the front facing images for the route
                            orderby r.Logmeter0
                            select r.Logmeter0;

            var PointData = frontImagesLu.ToList();
            var Points = allPoints.ToList();

            var setDiff = Points.Except(PointData);
            var setDiffLst = setDiff.ToList();

            var allPointsBeforeLst = allPointsBefore.ToList();

            var IdxB = allPointsBeforeLst.Count();  

            if(frontImagesStr.Any())
            {
                List<string> swappedPoints = controller.PutFrontAtIndex(frontImagesStr, IdxB);
                Images = swappedPoints;
                unmodifiedURLs = swappedPoints;
            }
            //else if(!frontImagesStr.Any())
            //{
            //    List<string> swappedPoints = controller.PutFrontAtIndex(frontImagesStr, IdxB-1);
            //    Images = swappedPoints;
            //    unmodifiedURLs = swappedPoints;
            //}

            if(frontRightImagesStr.Any())
            {
                List<string> swappedPointsRight = controller.PutFrontAtIndex(frontRightImagesStr, IdxB);
                unmodifiedURLsRight = swappedPointsRight;
            }
            if(frontLeftImagesStr.Any())
            {
                List<string> swappedPointsLeft = controller.PutFrontAtIndex(frontLeftImagesStr, IdxB);
                unmodifiedURLsLeft = swappedPointsLeft;
            }
            if(rearRightImagesStr.Any())
            {
                List<string> swappedPointsRRight = controller.PutFrontAtIndex(rearRightImagesStr, IdxB);
                unmodifiedURLsRRight = swappedPointsRRight;
            }
            if(rearLeftImagesStr.Any())
            {
                List<string> swappedPointsRLeft = controller.PutFrontAtIndex(rearLeftImagesStr, IdxB);
                unmodifiedURLsRLeft = swappedPointsRLeft;
            }
            if(pavementImagesStr.Any())
            {
                List<string> swappedPointsPavement = controller.PutFrontAtIndex(pavementImagesStr, IdxB);
                unmodifiedURLsPave = swappedPointsPavement;
            }

            List<string> swappedLogmeters = controller.PutFrontAtIndex(logmetersStr.ToList(), IdxB);
            List<string> swappedLatitudes = controller.PutFrontAtIndex(latitudesStr.ToList(), IdxB);
            List<string> swappedLongitudes = controller.PutFrontAtIndex(longitudesStr.ToList(), IdxB);

            Logmeters = swappedLogmeters;
            Latitudes = swappedLatitudes;
            Longitudes = swappedLongitudes;
        }

    }
    //=============================================================================================================================================================================
    //=============================================================================================================================================================================
    //=============================================================================================================================================================================

    async Task AsyncLongOperation() 
    {
        spinning = true;
        Images.Clear();
        await Task.Run(() => findInitialPoint());  //<--here!
        showArkansasMarker = true;
        currentCount++;
        spinning = false;
        await JSRuntime.InvokeVoidAsync("updateMap", latitudeId, longitudeId); //adds the point
        //await JSRuntime.InvokeVoidAsync("updateFeatureLayer", feature);
        //await JSRuntime.InvokeVoidAsync("closeNav");
    }

    async Task AsyncClearAll()    
    {
        spinning = true;
        await Task.Run(() => ClearSelection());  //<--here!
        currentCount++;
        spinning = false;

        //await JSRuntime.InvokeVoidAsync("Clear");
    }

    void OnChange(dynamic value, string name)
    {
        var str = value is IEnumerable ? string.Join(", ", value) : value;
        str = Convert.ToString(str);
        if(str == "1")
        {
            pageModel.ImageSelection = "f";
        }
        else if(str == "2")
        {
            pageModel.ImageSelection = "fl";
        }
        else if(str == "3")
        {
            pageModel.ImageSelection = "fr";
        }
        //pageModel.ImageSelection = str;
    }

    void OnChangeLogmeter(dynamic value, string name)
    {

        var str = value is IEnumerable ? string.Join(", ", value) : value;
        str = Convert.ToString(str);
        logmile = Convert.ToDouble(str) * 1609.344;
        searchText = "";
    }

    void ToggleHighRes()
    {
        isHighRes = !isHighRes;
    }

    void OnSubmitPlay()
    {
        if (Images.Any())
        {
            if(isPause == false)
            {
                isReverse = false;
                isPlay = true;
                time.Enabled = true;
                idx = idx + 1 >= Logmeters.Count() ? 0 : idx + 1;
            }
            else
            {
                OnSubmitStop();
            }
        }
    }

    void OnSubmitReverse()
    {
        if (Images.Any())
        {
            if(isPause == false)
            {
                isPlay = false;
                isReverse = true;
                //isPause = !isPause;
                time.Enabled = true;
                idx = idx - 1 < 0 ? Logmeters.Count() - 1 : idx - 1;
            }
            else
            {
                OnSubmitStop();
            }

        }
    }

    void OnSubmitStop()
    {
        isPlay = false;
        isReverse = false;

        time.Enabled = false;
    }

    protected override void OnAfterRender(bool firstRender)
    {
        int timeInterval = imgSpeed;

        if (firstRender)
        {
            time = new Timer();
            //Set the time interval.
            time.Interval = timeInterval; //around 600 for tablets on cellular
            time.Elapsed += OnTimeInterval;
            time.AutoReset = true;
            // Start the timer.
            //time.Enabled = false;
        }
        base.OnAfterRender(firstRender);
    }


    private async void OnTimeInterval(object sender, ElapsedEventArgs e)
    {
        await JSRuntime.InvokeVoidAsync("updateMap", latitudeId, longitudeId); //working but not initializing to first point
        //await JSRuntime.InvokeVoidAsync("updateFeatureLayer", feature);
        if (isPlay == true)
        {
            //showArkansasMarker = true;
            OnSubmitPlay();
        }
        if (isReverse == true)
        {
            OnSubmitReverse();
        }
        if(isPause == true)
        {
            OnSubmitStop();
        }
        time.Interval = imgSpeed;
        
        await InvokeAsync(() => StateHasChanged());
    }

    public void Dispose() //reference Interop.cs
    {
        // while navigating to other components, Dispose method will be called and clean up the Timer function.
        time?.Dispose();
        Interop.OnLatLngReceived -= HandleLatLngReceived; //reference Interop.cs
    }

    public static byte[] ConvertImageToByteArray(string filePath) //takes the path to the images and returnss byte array
    {
        var t = filePath.Substring(0, 34);
        if (filePath.Substring(0, 34) == "\\\\mmhisdata-01\\av-01\\MMHIS Pave24\\"){ //this is messy. Need to find a better way to do this.
            filePath = "\\\\sirapav-01\\MMHIS Pave24\\" + filePath.Substring(34);    //same with the file paths in the view
        }
        else if(filePath.Substring(0,21)== "\\\\mmhisdata-01\\av-01\\"){
            filePath = "\\\\mmhisdata-01\\" + filePath.Substring(21);
        }
        using (var image = Image.FromFile(filePath))
        {
            using (var m = new MemoryStream())
            {
                image.Save(m, image.RawFormat);
                return m.ToArray();
            }
        }
    }

    public byte[] ResizeImage(byte[] byteImageIn)
    {
        byte[] currentByteImageArray = byteImageIn;
        double scale = 1f;
        //float contrast = 1.5f; // Increase this number for higher contrast

        MemoryStream inputMemoryStream = new MemoryStream(byteImageIn);
        Image fullsizeImage = Image.FromStream(inputMemoryStream);
        int fullsizeImageWidth = fullsizeImage.Width;
        int fullsizeImageHeight = fullsizeImage.Height;

        scale = imgQuality / fullsizeImageWidth; //decrease this number for lower quality image
        fullsizeImageWidth = (int)(fullsizeImageWidth * scale);
        fullsizeImageHeight = (int)(fullsizeImageHeight * scale);

        Bitmap resizedImage = new Bitmap(fullsizeImage.GetThumbnailImage(fullsizeImageWidth, fullsizeImageHeight, null, IntPtr.Zero));

        if(contrast > 1)
        {
            // Apply contrast adjustment
            using (Graphics g = Graphics.FromImage(resizedImage))
            {
                float[][] colorMatrixElements = {
            new float[] {contrast, 0, 0, 0, 0},
            new float[] {0, contrast, 0, 0, 0},
            new float[] {0, 0, contrast, 0, 0},
            new float[] {0, 0, 0, 1, 0},
            new float[] {0, 0, 0, 0, 1}
    };
                ColorMatrix colorMatrix = new ColorMatrix(colorMatrixElements);
                ImageAttributes attributes = new ImageAttributes();
                attributes.SetColorMatrix(colorMatrix, ColorMatrixFlag.Default, ColorAdjustType.Bitmap);
                g.DrawImage(resizedImage, new Rectangle(0, 0, resizedImage.Width, resizedImage.Height), 0, 0, resizedImage.Width, resizedImage.Height, GraphicsUnit.Pixel, attributes);
            }
        }


        MemoryStream outputMemoryStream = new MemoryStream();
        resizedImage.Save(outputMemoryStream, ImageFormat.Jpeg);
        byte[] resizedByteImageArray = outputMemoryStream.ToArray();
        return resizedByteImageArray;
    }

    private async Task HandleWheelEvent(WheelEventArgs e)
    {
        await JSRuntime.InvokeVoidAsync("updateMap", latitudeId, longitudeId);
        await JSRuntime.InvokeVoidAsync("preventDefault", imgElement);
        if (e.DeltaY > 0 && idx > 0) // Scroll up
        {
            idx--;
        }
        else if (e.DeltaY < 0 && idx < unmodifiedURLs.Count - 1) // Scroll down
        {
            idx++;
        }
        
    } 

}
